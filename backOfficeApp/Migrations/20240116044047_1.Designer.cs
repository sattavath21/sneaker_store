// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backOfficeApp.Migrations
{
    [DbContext(typeof(BackofficeappDbContext))]
    [Migration("20240116044047_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasColumnType("longtext");

                    b.Property<string>("SellerName")
                        .HasColumnType("longtext");

                    b.Property<int>("SellerTelNumber")
                        .HasColumnType("int");

                    b.Property<string>("Village")
                        .HasColumnType("longtext");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("department")
                        .HasColumnType("longtext");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext");

                    b.Property<string>("lastName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryBranchId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StoreBranchId")
                        .HasColumnType("int");

                    b.HasKey("BillId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryBranchId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("StoreBranchId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("BillItem", b =>
                {
                    b.Property<int>("BillItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("ProductConditionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("ShoeSizeId")
                        .HasColumnType("int");

                    b.HasKey("BillItemId");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductConditionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoeSizeId");

                    b.ToTable("BillItem");
                });

            modelBuilder.Entity("BranchAddress", b =>
                {
                    b.Property<int>("BranchAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Province")
                        .HasColumnType("longtext");

                    b.Property<string>("Village")
                        .HasColumnType("longtext");

                    b.HasKey("BranchAddressId");

                    b.ToTable("BranchAddress");
                });

            modelBuilder.Entity("BranchTelNumber", b =>
                {
                    b.Property<int>("BranchTelNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DeliveryBranchId")
                        .HasColumnType("int");

                    b.Property<string>("TelNumber")
                        .HasColumnType("longtext");

                    b.HasKey("BranchTelNumberId");

                    b.HasIndex("DeliveryBranchId");

                    b.ToTable("BranchTelNumber");
                });

            modelBuilder.Entity("Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BrandLogo")
                        .HasColumnType("longtext");

                    b.Property<string>("BrandName")
                        .HasColumnType("longtext");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DefaultAddress")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailSubscription")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("VacationMode")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CustomerAddress", b =>
                {
                    b.Property<int>("CustomerAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("CustomerBankAccount", b =>
                {
                    b.Property<int>("CustomerBankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("AccountQr")
                        .HasColumnType("longtext");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerBankAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBankAccount");
                });

            modelBuilder.Entity("CustomerDefectImage", b =>
                {
                    b.Property<int>("CustomerDefectImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DefectImage")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductSellingId")
                        .HasColumnType("int");

                    b.HasKey("CustomerDefectImageId");

                    b.HasIndex("ProductSellingId");

                    b.ToTable("CustomerDefectImage");
                });

            modelBuilder.Entity("CustomerProductImage", b =>
                {
                    b.Property<int>("CustomerProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductSellingId")
                        .HasColumnType("int");

                    b.HasKey("CustomerProductImageId");

                    b.HasIndex("ProductSellingId");

                    b.ToTable("CustomerProductImage");
                });

            modelBuilder.Entity("CustomerWishlist", b =>
                {
                    b.Property<int>("CustomerWishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShoeSizeId")
                        .HasColumnType("int");

                    b.HasKey("CustomerWishlistId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoeSizeId");

                    b.ToTable("CustomerWishlist");
                });

            modelBuilder.Entity("DeliveryBranch", b =>
                {
                    b.Property<int>("DeliveryBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BranchAddressId")
                        .HasColumnType("int");

                    b.Property<string>("BranchAvailability")
                        .HasColumnType("longtext");

                    b.Property<string>("BranchGooglemapPosition")
                        .HasColumnType("longtext");

                    b.Property<string>("BranchName")
                        .HasColumnType("longtext");

                    b.Property<int>("DeliveryServiceId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryBranchId");

                    b.HasIndex("BranchAddressId");

                    b.HasIndex("DeliveryServiceId");

                    b.ToTable("DeliveryBranch");
                });

            modelBuilder.Entity("DeliveryReceiptPic", b =>
                {
                    b.Property<int>("DeliveryReceiptPicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("PicString")
                        .HasColumnType("longtext");

                    b.HasKey("DeliveryReceiptPicId");

                    b.HasIndex("BillId");

                    b.ToTable("DeliveryReceiptPic");
                });

            modelBuilder.Entity("DeliveryService", b =>
                {
                    b.Property<int>("DeliveryServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeliveryCompanyName")
                        .HasColumnType("longtext");

                    b.HasKey("DeliveryServiceId");

                    b.ToTable("DeliveryService");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("MinSpend")
                        .HasColumnType("int");

                    b.Property<int>("ShippingMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DiscountId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasColumnType("longtext");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmountSold")
                        .HasColumnType("int");

                    b.Property<string>("Colorway")
                        .HasColumnType("longtext");

                    b.Property<int>("LowestSellingPrice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductCatId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCollectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Sku")
                        .HasColumnType("longtext");

                    b.Property<int>("StorePrice")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCatId");

                    b.HasIndex("ProductCollectionId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ProductCat", b =>
                {
                    b.Property<int>("ProductCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CatName")
                        .HasColumnType("longtext");

                    b.HasKey("ProductCatId");

                    b.ToTable("ProductCat");
                });

            modelBuilder.Entity("ProductCollection", b =>
                {
                    b.Property<int>("ProductCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext");

                    b.HasKey("ProductCollectionId");

                    b.HasIndex("BrandId");

                    b.ToTable("ProductCollection");
                });

            modelBuilder.Entity("ProductCondition", b =>
                {
                    b.Property<int>("ProductConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConditionName")
                        .HasColumnType("longtext");

                    b.HasKey("ProductConditionId");

                    b.ToTable("ProductCondition");
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("longtext");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("ProductSelling", b =>
                {
                    b.Property<int>("ProductSellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BoxDefect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPlacedPrice")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductConditionId")
                        .HasColumnType("int");

                    b.Property<bool>("ProductDefect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductLiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("ShoeSizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductSellingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ProductConditionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoeSizeId");

                    b.ToTable("ProductSelling");
                });

            modelBuilder.Entity("ProductWithSize", b =>
                {
                    b.Property<int>("ProductWithSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InventoryQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShoeSizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductWithSizeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoeSizeId");

                    b.ToTable("ProductWithSize");
                });

            modelBuilder.Entity("ShippingMethod", b =>
                {
                    b.Property<int>("ShippingMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MethodName")
                        .HasColumnType("longtext");

                    b.HasKey("ShippingMethodId");

                    b.ToTable("ShippingMethod");
                });

            modelBuilder.Entity("ShoeSize", b =>
                {
                    b.Property<int>("ShoeSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("SizeNumber")
                        .HasColumnType("double");

                    b.Property<string>("SizeType")
                        .HasColumnType("longtext");

                    b.HasKey("ShoeSizeId");

                    b.ToTable("ShoeSize");
                });

            modelBuilder.Entity("StoreBranch", b =>
                {
                    b.Property<int>("StoreBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasColumnType("longtext");

                    b.HasKey("StoreBranchId");

                    b.ToTable("StoreBranch");
                });

            modelBuilder.Entity("Bill", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryBranch", "DeliveryBranch")
                        .WithMany()
                        .HasForeignKey("DeliveryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreBranch", "StoreBranch")
                        .WithMany()
                        .HasForeignKey("StoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryBranch");

                    b.Navigation("Discount");

                    b.Navigation("OrderStatus");

                    b.Navigation("ShippingMethod");

                    b.Navigation("StoreBranch");
                });

            modelBuilder.Entity("BillItem", b =>
                {
                    b.HasOne("Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCondition", "ProductCondition")
                        .WithMany()
                        .HasForeignKey("ProductConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeSize", "ShoeSize")
                        .WithMany()
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");

                    b.Navigation("ProductCondition");

                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("BranchTelNumber", b =>
                {
                    b.HasOne("DeliveryBranch", "DeliveryBranch")
                        .WithMany("BranchTelNumbers")
                        .HasForeignKey("DeliveryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryBranch");
                });

            modelBuilder.Entity("CustomerAddress", b =>
                {
                    b.HasOne("Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerBankAccount", b =>
                {
                    b.HasOne("Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer", "Customer")
                        .WithMany("CustomerBankAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerDefectImage", b =>
                {
                    b.HasOne("ProductSelling", "ProductSelling")
                        .WithMany("CustomerDefectImages")
                        .HasForeignKey("ProductSellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSelling");
                });

            modelBuilder.Entity("CustomerProductImage", b =>
                {
                    b.HasOne("ProductSelling", "ProductSelling")
                        .WithMany("CustomerProductImages")
                        .HasForeignKey("ProductSellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSelling");
                });

            modelBuilder.Entity("CustomerWishlist", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany("CustomerWishlists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeSize", "ShoeSize")
                        .WithMany()
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("DeliveryBranch", b =>
                {
                    b.HasOne("BranchAddress", "BranchAddress")
                        .WithMany()
                        .HasForeignKey("BranchAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryService", "DeliveryService")
                        .WithMany()
                        .HasForeignKey("DeliveryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchAddress");

                    b.Navigation("DeliveryService");
                });

            modelBuilder.Entity("DeliveryReceiptPic", b =>
                {
                    b.HasOne("Bill", "Bill")
                        .WithMany("DeliveryReceiptPics")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.HasOne("ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("ProductCat", "ProductCat")
                        .WithMany()
                        .HasForeignKey("ProductCatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCollection", "ProductCollection")
                        .WithMany()
                        .HasForeignKey("ProductCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCat");

                    b.Navigation("ProductCollection");
                });

            modelBuilder.Entity("ProductCollection", b =>
                {
                    b.HasOne("Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductSelling", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany("ProductSellings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCondition", "ProductCondition")
                        .WithMany()
                        .HasForeignKey("ProductConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeSize", "ShoeSize")
                        .WithMany()
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("Product");

                    b.Navigation("ProductCondition");

                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("ProductWithSize", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductWithSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeSize", "ShoeSize")
                        .WithMany()
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("Bill", b =>
                {
                    b.Navigation("BillItems");

                    b.Navigation("DeliveryReceiptPics");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerBankAccounts");

                    b.Navigation("CustomerWishlists");

                    b.Navigation("ProductSellings");
                });

            modelBuilder.Entity("DeliveryBranch", b =>
                {
                    b.Navigation("BranchTelNumbers");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductWithSizes");
                });

            modelBuilder.Entity("ProductSelling", b =>
                {
                    b.Navigation("CustomerDefectImages");

                    b.Navigation("CustomerProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
