<div id="app1">

  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
    Product Information</div>
  <q-table class="bg-grey-2" title="Product Information" :rows="products" :columns="columns">

    <template v-slot:top-left>
      <div class="text-h6 q-pa-md">Product Details <q-btn icon="restart_alt" round class="q-mx-lg" size="md"
          color="grey" @@click="onReset"></q-btn></div>
      <q-separator vertical class="q-my-sm"></q-separator>
      <div class="q-pl-sm">
        <q-input debounce="200" dense v-model="searchText" type="text" @@change="searchProduct">
          <template v-slot:prepend>
            <q-icon name="search"></q-icon>
          </template>
        </q-input>

      </div>

    </template>
    <template v-slot:body="props">
      <q-tr :props="props">
        <q-td key="details" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="blue-12" @@click="showDetails(props.row)"
            icon="format_list_numbered" size="15px"></q-btn>
          <q-dialog v-model="showProductDetails" persistent :max-width="400">
            <div style="width: 100%; max-width: 400px;">
              <!-- Content of your dialog -->
              <q-card>
                <!-- Card header section -->
                <q-card-section class="row items-center">
                  <q-img :src="selectedProduct.productImageUrl" alt="Product Image" class="avatar-image" />
                </q-card-section>

                <!-- Product name section -->
                <q-card-section class="row items-center">
                  <div class="text-h6">{{ selectedProduct.productName }} Details</div>
                </q-card-section>

                <!-- Select size section -->
                <q-card-section>
                  <div v-if="selectedProduct && selectedProduct.productWithSizes">
                    <q-select v-model="selectedSize" :options="sizeOptions" label="Select Size" dense outlined
                      emit-value map-options @@update:model-value="selectedShoeSize">
                      <template v-slot:option="scope">
                        <q-item v-bind="scope.itemProps">
                          <q-item-section>
                            <q-item-label>{{ scope.opt.label }}</q-item-label>
                          </q-item-section>
                          <q-item-section avatar>
                            <q-item-label caption>Qty: {{ scope.opt.description }}</q-item-label>
                          </q-item-section>
                        </q-item>
                      </template>

                    </q-select>
                  </div>
                </q-card-section>

                <!-- Inventory quantity section -->
                <q-card-section v-if="selectedSize" class="bg-light-blue">
                  <div class="text-white text-h6" v-if="selectedInventoryQty !== null">Inventory Qty: {{
                    selectedInventoryQty }}</div>
                  <q-popup-edit class="bg-grey-12 text-white" v-model.number="selectedInventoryQty"
                    :validate="val => val !== null && val !== undefined && Number.isInteger(val) && val >= 0"
                    v-slot="scope">
                    <q-input type="number" v-model.number="selectedInventoryQty" dense autofocus
                      @@input="updateInventoryQty($event.target.value)">
                      <template v-slot:rules>
                        <q-validator v-slot="{ validate }">
                          <span v-if="!validate(selectedInventoryQty)">Value must be a non-negative integer</span>
                        </q-validator>
                      </template>
                    </q-input>
                    <div class="justify-end row">
                      <q-btn flat dense color="negative" icon="cancel" @@click.stop.prevent="scope.cancel" />
                      <q-btn flat dense color="positive" icon="check_circle"
                        @@click.stop.prevent="updateInventoryQty(selectedProduct, selectedInventoryQty)"
                        :disable="!scope.validate(selectedInventoryQty)" v-close-popup />
                    </div>
                  </q-popup-edit>
                </q-card-section>

                <!-- Card actions section -->
                <q-card-actions align="center">
                  <q-btn class="q-ma-sm text-h6" color="grey" @@click="showProductDetails = false" label="Close"
                    style="height: 30px; width: 120px;"></q-btn>
                </q-card-actions>

              </q-card>
            </div>
          </q-dialog>




        </q-td>
        <q-td key="index" :props="props">{{ products.indexOf(props.row) + 1 }}</q-td>
        <q-td key="productImage" :props="props">
          <q-img :src="props.row.productImageUrl" style="cursor: pointer;" @@click="toggleImageDialog(props.row)" />
          <q-dialog v-model="props.row.showImageDialog" persistent auto-close>
            <div style="text-align: center;">
              <img :src="props.row.productImageUrl" style="max-width: 100%; max-height: 100%;" />
            </div>
          </q-dialog>
        </q-td>

        <q-td key="productName" :props="props">
          {{ props.row.productName }}
          <q-popup-edit v-model="props.row.productName">
            <q-input v-model="props.row.productName" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="costPrice" :props="props">{{ props.row.costPrice}}
          <q-popup-edit v-model="props.row.costPrice">
            <q-input v-model="props.row.costPrice" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="sellingPrice" :props="props">{{ props.row.sellingPrice}}
          <q-popup-edit v-model="props.row.sellingPrice">
            <q-input v-model="props.row.sellingPrice" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="amountsold" :props="props">{{ props.row.amountsold}}</q-td>
        <q-td key="inventoryQty" :props="props">
          {{ props.row.totalInventoryQty }}
        </q-td>

        <q-td key="collectionName" :props="props">
          {{ props.row.collection.collectionName }}
          <q-popup-edit v-model="props.row.collection.collectionName">
            <q-input v-model="props.row.collection.collectionName" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="brandName" :props="props">
          {{ props.row.brand ? props.row.brand.brandName : '' }}
          <q-popup-edit v-model="props.row.brand.brandName">
            <q-input v-model="props.row.brand.brandName" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>

        </q-td>
        <q-td key="barcode" :props="props">
          {{ props.row.barcode }}
          <q-popup-edit v-model="props.row.barcode">
            <q-input v-model="props.row.barcode" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="sku" :props="props">{{ props.row.sku}}
          <q-popup-edit v-model="props.row.sku">
            <q-input v-model="props.row.sku" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="colorway" :props="props">
          {{ props.row.colorway }}
          <q-popup-edit v-model="props.row.colorway">
            <q-input v-model="props.row.colorway" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="releasedate" :props="props">
          <q-input filled v-model="props.row.releasedate" mask="date" style="width: 165px;">
            <template v-slot:append>
              <q-icon name="event" class="cursor-pointer">
                <q-popup-proxy cover transition-show="scale" transition-hide="scale">
                  <q-date v-model="props.row.releasedate" landscape color="red">
                    <div class="row items-center justify-end">
                      <q-btn v-close-popup label="Change" color="red" flat @@click="editProduct(props.row)"></q-btn>
                      <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
                    </div>
                  </q-date>
                </q-popup-proxy>
              </q-icon>
            </template>
          </q-input>
        </q-td>

        <q-td key="productImageUrl" :props="props">
          {{ props.row.productImageUrl }}
          <q-popup-edit v-model="props.row.productImageUrl">
            <q-input v-model="props.row.productImageUrl" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="deletes" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
            size="15px"></q-btn>
          <q-dialog v-model="confirm" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this product?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>

        </q-td>



      </q-tr>
    </template>
  </q-table>

  <div class="bg-grey-9 q-pa-sm" style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"></div>


  <q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 50px;" color="green" icon="add_box"
    label="Add Product" size="md" onclick='window.location="/Product/AddPro"'></q-btn>



    <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */;
            margin-top: 110px;">
        Brands Information
    </div>

    <q-table title="Brands" :rows="brandRows" :columns="brandColumns" row-key="brandId" separator="none" @*
        v-model:selected="selected" selection="multiple" *@>

        <template #body="props">
            <q-tr :props="props">

                <q-td key="expand" :props="props">
                    <q-btn color="black" flat dense round :icon="props.expand ? 'arrow_drop_down' : 'arrow_right'"
                        @@click="props.expand = !props.expand">
                    </q-btn>
                </q-td>

                <q-td key="brandId" :props="props">
                    {{ props.row.brandId }}
                </q-td>

                <q-td key="brandLogo" :props="props">
                    <q-img :src="props.row.brandLogoUrl" style="cursor: pointer;" />
                </q-td>

                <q-td key="brandName" :props="props">
                    {{ props.row.brandName }}
                    <q-popup-edit v-model="props.row.brandName">
                        <q-input v-model="props.row.brandName" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editBrand(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>

                <q-td key="brandLogoUrl" :props="props">
                    {{ props.row.brandLogoUrl }}
                    <q-popup-edit v-model="props.row.brandLogoUrl">
                        <q-input v-model="props.row.brandLogoUrl" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editBrand(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>

                <q-td key="brandActions" :props="props">
                    <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="openDeleteBrandDialog(props.row.brandId)" icon="delete_forever"
                        size="15px"></q-btn>
                    <q-dialog v-model="deleteBrandDialogVisible" persistent>
                        <q-card>
                            <q-card-section class="row items-center">
                                <q-avatar icon="person_remove" color="orange" text-color="white"></q-avatar>
                                <span class="q-ml-sm">Are you sure you want to delete this brand?</span>
                            </q-card-section>

                            <q-card-actions align="center">
                                <q-btn class="q-ma-sm" color="red-6" @@click="deleteBrand" label="Yes"
                                    v-close-popup></q-btn>
                                <q-btn class="q-ma-sm" label="No" color="grey" @@click="closeDeleteBrandDialog" />
                            </q-card-actions>
                        </q-card>
                    </q-dialog>
                </q-td>

            </q-tr>

            @* Expanded section *@
            <q-tr :props="props" v-show="props.expand">
                <q-td colspan="100%">
                    <q-table :title="props.row.brandName + ' Collections'" :rows="props.row.brandWithCollections"
                        :columns="collectionColumns" row-key="collectionId" separator="none">
                        <!-- Define columns for phone numbers -->
                        <!-- Dont forget template -->
                        <!-- props become the phoneNumbers -->
                        <template #body="props">

                            <!-- NEW props -->
                            <q-tr :props="props">

                                <q-td key="collectionIndex" :props="props">{{ props.rowIndex + 1 }}</q-td>
                                <q-td key="collectionId" :props="props">
                                    {{ props.row.collection.collectionId }}
                                </q-td>
                                <q-td key="collectionName" :props="props">
                                    {{ props.row.collection.collectionName }}
                                    <q-popup-edit v-model="props.row.collection.collectionName">
                                        <q-input v-model="props.row.collection.collectionName" dense autofocus
                                            counter></q-input>
                                        <div class="justify-end row">
                                            <q-btn color="blue-grey-6" @@click="editCollection(props.row.collection)"
                                                icon="edit" label="edit" v-close-popup="cancelEnabled">
                                            </q-btn>
                                        </div>
                                    </q-popup-edit>

                                </q-td>

                                <q-td key="collectionActions" :props="props">
                                    <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="openDeleteCollectionDialog(props.row.brandWithCollectionId)"
                                        icon="delete_forever" size="15px"></q-btn>
                                    <q-dialog v-model="deleteCollectionDialogVisible" persistent>
                                        <q-card>
                                            <q-card-section class="row items-center">
                                                <q-avatar icon="person_remove" color="orange"
                                                    text-color="white"></q-avatar>
                                                <span class="q-ml-sm">Are you sure you want to delete this
                                                    collection?</span>
                                            </q-card-section>

                                            <q-card-actions align="center">
                                                <q-btn class="q-ma-sm" color="red-6"
                                                    @@click="deleteCollection" label="Yes"
                                                    v-close-popup></q-btn>
                                                <q-btn class="q-ma-sm" label="No" color="grey" @@click="closeDeleteCollectionDialog"  />
                                            </q-card-actions>
                                        </q-card>
                                    </q-dialog>
                                </q-td>

                            </q-tr>
                        </template>

                    </q-table>

                    <q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 20px;" color="yellow-8"
                        icon="add_box" label="Add new collection" size="md"
                        @@click="openCollectionDialog(props.row.brandId)">
                    </q-btn>

                    @* Dialog when add collection *@
                    <q-dialog v-model="collectionDialogVisible" persistent>
                        <q-card>
                            <q-card-section class="row items-center">
                                <span class="q-ml-sm">Enter collection name:</span>
                            </q-card-section>

                            <q-card-section>
                                <q-input filled v-model="newCollection.collectionName" label="Collection Name"
                                    lazy-rules
                                    :rules="[ val => val && val.length > 0 || 'Please enter collection name']">
                                </q-input>
                            </q-card-section>


                            <q-card-actions align="center">
                                <q-btn class="q-ma-sm" color="primary" @@click="addCollection(props.row.brandId)"
                                    label="Add"></q-btn>
                                <q-btn class="q-ma-sm" label="Cancel" color="grey"
                                    @@click="closeCollectionDialog"></q-btn>
                            </q-card-actions>
                        </q-card>
                    </q-dialog>

                </q-td>
            </q-tr>



        </template>

    </q-table>

    <q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 20px;" color="green" icon="add_box"
        label="Add new brand" size="md" @@click="openDialog">
    </q-btn>

    @* Dialog when add Delivery *@

    <q-dialog v-model="brandDialogVisible" persistent>
        <q-card>
            <q-card-section class="row items-center">
                <span class="q-ml-sm">Enter Brand Name:</span>
            </q-card-section>

            <q-card-section>
                <q-input filled v-model="newBrand.brandName" label="Brand Name" lazy-rules
                    :rules="[ val => val && val.length > 0 || 'Please enter brand name']">
                </q-input>
            </q-card-section>

            <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="primary" @@click="addBrand" label="Add"></q-btn>
                <q-btn class="q-ma-sm" label="Cancel" color="grey" @@click="closeDialog"></q-btn>
            </q-card-actions>
        </q-card>
    </q-dialog>
    

</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          showProductDetails: false,
          selectedProduct: null,
          selectedSize: null,
          selectedInventoryQty: null,
          sizeOptions: [],
          showImageDialog: false, // Add showImageDialog variable
          products: [],
          originalProducts: [],
          confirm: false,
          confirm2: false,
          searchText: "",
          columns: [
            {
              name: 'details',
              label: 'Product details',
              field: 'details',
              align: 'center'
            },
            {
              name: 'index',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'productImage',
              label: 'Product Image',
              field: 'productImageUrl',
              sortable: true,
              align: 'center',

            },
            {
              name: 'productName',
              label: 'Product Name',
              field: 'productName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'costPrice',
              label: 'Cost Price',
              field: 'costPrice',
              sortable: true,
              align: 'center',

            },
            {
              name: 'sellingPrice',
              label: 'Selling Price',
              field: 'sellingPrice',
              sortable: true,
              align: 'center',

            },
            {
              name: 'amountsold',
              label: 'Amount Sold',
              field: 'amountsold',
              sortable: true,
              align: 'center',

            },
            {
              name: 'inventoryQty',
              label: 'Total Qty',
              field: 'totalInventoryQty', // Update the field to TotalInventoryQty
              sortable: true,
              align: 'center',
            },

            {
              name: 'collectionName',
              label: 'Product Collection',
              field: 'collection.collectionName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'brandName',
              label: 'Brand Name',
              field: 'brand.brandName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'barcode',
              label: 'Barcode',
              field: 'barcode',
              sortable: true,
              align: 'center',

            },
            {
              name: 'sku',
              label: 'SKU',
              field: 'sku',
              sortable: true,
              align: 'center',

            },
            {
              name: 'colorway',
              label: 'Colorway',
              field: 'colorway',
              sortable: true,
              align: 'center',

            },
            {
              name: 'releasedate',
              label: 'Release Date',
              field: 'releasedate',
              sortable: true,
              align: 'center',

            },
            {
              name: 'productImageUrl',
              label: 'Product URL',
              field: 'productImageUrl',
              sortable: true,
              align: 'center',

            },
            {
              name: 'deletes',
              label: 'Delete product',
              field: 'deletes',
              align: 'center'
            },
          ],

          brandDialogVisible: false,
                    collectionDialogVisible: false,
            newBrand: {
                brandName: ""
            },
                    newCollection: {
                        collectionName: ""
                    },

                    brandRows: [],
                    brandColumns: [
                        {
                            name: 'expand',
                            label: 'Expand',
                            field: 'expand',
                            align: 'center'

                        },

                        {
                            name: 'brandId',
                            field: 'brandId',
                            align: 'center',
                            sortable: true,
                            label: 'ID'
                        },
                        {
                            name: 'brandLogo',
                            label: 'Brand logo',
                            field: 'brandLogoUrl',
                            sortable: true,
                            align: 'center',
                        },
                        {
                            name: 'brandName',
                            label: 'Brand name',
                            field: 'brandName',
                            align: 'center',
                            sortable: true,
                        },
                        {
                            name: 'brandLogoUrl',
                            label: 'Brand url',
                            field: 'brandLogoUrl',
                            align: 'center'
                        },
                        {
                            name: 'brandActions',
                            label: 'Actions',
                            field: 'brandActions',
                            align: 'center'
                        },

                    ],

                    collectionColumns: [
                        {
                            name: 'collectionIndex',
                            field: 'collectionIndex',
                            align: 'center',
                            sortable: true,
                            label: 'Collection No'
                        },
                        {
                            name: 'collectionId',
                            field: 'collection.collectionId',
                            align: 'center',
                            sortable: true,
                            label: 'Collection ID'
                        },
                        {
                            name: 'collectionName',
                            label: 'Collection name',
                            field: 'collection.collectionName',
                            align: 'center',
                            sortable: true,
                        },
                        {
                            name: 'collectionActions',
                            label: 'Actions',
                            field: 'collectionActions',
                            align: 'center'
                        }

                    ],

                     deleteBrandDialogVisible: false,
          deleteCollectionDialogVisible: false,
          brandIdToDelete:0,
          brandCollectionIdToDelete: 0
          
        };
      }
      ,
      //methods
      methods: {
        async updateInventoryQty(product, newValue) {
          try {
            // Find the productWithSize object corresponding to the selected size number
            const selectedProductWithSize = product.productWithSizes.find(pws => pws.shoeSize.sizeNumber === this.selectedSize);

            if (selectedProductWithSize) {
              // Update the inventory quantity of the selected productWithSize
              selectedProductWithSize.inventoryQty = newValue;

              // Call your editProduct function or any other logic to handle the update
              await this.editProduct(product);

            } else {
              console.error("Selected productWithSize not found.");
            }
          } catch (error) {
            console.error("Error updating inventory:", error);
          }
        }, //ef

        selectedShoeSize(newValue) {
          if (newValue !== null) {
            const selectedProductWithSize = this.selectedProduct.productWithSizes.find(pws => pws.shoeSize.sizeNumber === newValue);
            this.selectedInventoryQty = selectedProductWithSize ? selectedProductWithSize.inventoryQty : null;
          } else {
            this.selectedInventoryQty = null;
          }
        }, //ef

        showDetails(product) {
          this.selectedProduct = product;
    @* this.sizeOptions = this.selectedProduct.productWithSizes.map(pws => pws.shoeSize.sizeNumber); *@
            this.sizeOptions = this.selectedProduct.productWithSizes.map(pws => ({
              label: pws.shoeSize.sizeNumber,
              value: pws.shoeSize.sizeNumber,
              description: pws.inventoryQty
            }));

          // Reset selected size and inventory quantity when showing details
          this.selectedSize = null;
          this.selectedInventoryQty = null;
          this.showProductDetails = true;
        }, //ef
        toggleImageDialog(product) {
          product.showImageDialog = !product.showImageDialog;
        }, //ef
        async editProduct(item) {
          try {
            // Assuming item.releasedate is a valid date string
            item.releasedate = new Date(item.releasedate);
            item.releasedate.setDate(item.releasedate.getDate() + 1);

            // Convert the date to ISO string format
            item.releasedate = item.releasedate.toISOString();


            const response = await axios.post("api/EditProduct", item);

            console.log("Request data:", item);
            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
            } else {
              console.error("Unexpected response status:", response.status);
            }
          } catch (error) {
            console.error("Error during request:", error);

            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }
        }
        , //ef

        async deleteProduct(item) {
          console.log(item);
          var url = "/api/DeleteProduct";
          var del = item;

          try {
            // Send the delete request
            await axios.post(url, del);

            // Use the correct property name in the filter callback
            this.products = this.products.filter(x => x.productId !== item.productId);

            // Set a flag in local storage indicating successful delete
            localStorage.setItem('deleteSuccess', 'true');

            // Refresh the page
            window.location.reload();
          } catch (error) {
            console.error('Error deleting delivery collection:', error);

            // Notify the user about the error
            this.$q.notify({
              type: 'negative',
              color: 'red-8',
              message: 'Error deleting delivery collection'
            });
          }
        }
        , //ef
        searchProduct() {
          if (this.searchText !== "") {
            this.products = this.originalProducts.filter(product => {
              const searchTextLower = this.searchText.toLowerCase();

              return (
                product.productName.toLowerCase().includes(searchTextLower) ||
                product.sku.toLowerCase().includes(searchTextLower) ||
                product.colorway.toLowerCase().includes(searchTextLower) ||
                product.collection.collectionName.toLowerCase().includes(searchTextLower) ||
                product.brand.brandName.toLowerCase().includes(searchTextLower)
              );
            });

            console.log(this.searchText);
          }
          else {
            console.log(this.products);
            this.products = [...this.originalProducts]
            const notif = this.$q.notify({
              type: 'ongoing',
              message: 'Loading...'
            })

            // simulate delay
            setTimeout(() => {
              notif({
                type: 'positive',
                message: 'Reseted',
                timeout: 300
              })
            }, 600)
          }
        }
        , //ef
        onReset() {
          const notif = this.$q.notify({
            type: 'ongoing',
            message: 'Loading...'
          })

          // simulate delay
          setTimeout(() => {
            notif({
              type: 'positive',
              message: 'Reseted',
              timeout: 300
            })
          }, 600)
          this.products = [...this.originalProducts]
          this.searchText = ""
        },

        openDialog() {
                    this.brandDialogVisible = true;
                }, //ef
                closeDialog() {
                    this.brandDialogVisible = false;
                }, //ef
                openCollectionDialog(brandId) {
                    this.collectionDialogVisible = true;
                    this.newCollectionBrandId = brandId; // Store the brandId for later use
                }, //ef

                closeCollectionDialog() {
                    this.collectionDialogVisible = false;
                }, //ef

                openDeleteBrandDialog(brandId){
          this.deleteBrandDialogVisible = true;
          this.brandIdToDelete = brandId;
          
        },
    closeDeleteBrandDialog() {
          this.deleteBrandDialogVisible = false;
          this.brandIdToDelete = 0;
        },

      openDeleteCollectionDialog(brandCollectionId) {
        this.deleteCollectionDialogVisible = true;
        this.brandCollectionIdToDelete = brandCollectionId;
      },
        closeDeleteCollectioDialog() {
          this.deleteCollectionDialogVisible = false;
          this.brandCollectionIdToDelete = 0;
        },

                async addBrand() {
                    try {
                        console.log("Brand String:", this.newBrand);
                        // Make the myapi call
                        var response = await axios.post("/myapi/AddBrand", this.newBrand);

                        // Handle the response or perform any necessary logic
                        if (response.status === 200) {
                            // Additional logic after successful product addition
                            this.$q.notify({
                                color: 'green-4',
                                textColor: 'white',
                                icon: 'cloud_done',
                                message: 'New Brand added successfully!'
                            });
                            this.closeDialog();
                            this.onReset();

                        } else {
                            // Log detailed error information
                            console.error(response);

                            // Handle the case where the myapi call was not successful
                            this.$q.notify({
                                color: 'red-4',
                                textColor: 'white',
                                icon: 'error',
                                message: 'Error adding Brand. Please check the console for details.'
                            });
                        }
                    } catch (error) {
                        // Log detailed error information
                        console.error(error);

                        // Hide loading indicator in case of an error
                        this.$q.loading.hide();

                        this.$q.notify({
                            color: 'red-4',
                            textColor: 'white',
                            icon: 'error',
                            message: 'Error adding Brand. Please check the console for details.'
                        });
                    }
                }

                , //ef

                async editBrand(item) {
                    try {
                        const response = await axios.post("myapi/EditBrand", item);
                        console.log("Request data:", item);
                        console.log("Response data:", response.data);

                        if (response.status >= 200 && response.status < 300) {
                            console.log("Request successful");
                        } else {
                            console.error("Unexpected response status:", response.status);
                        }
                    } catch (error) {
                        console.error("Error during request:", error);

                        if (error.response?.data?.errors) {
                            console.error("Validation errors:", error.response.data.errors);
                        }
                    }
                }
                , //ef

async deleteBrand() {
    try {
        const response = await axios.post(`/myapi/DeleteBrand?brandIdToDelete=${this.brandIdToDelete}`);
          
        this.brandIdToDelete = 0;
        window.location.reload();
        console.log("Delete response:", response.data);

        // Handle successful deletion
    } catch (error) {
        console.error("Error deleting brand:", error);
        // Handle error
    }
},
                async addCollection() {
                    try {
                        console.log("Branch String:", this.newCollection);

                        // Make the API call
                        var response = await axios.post(`/myapi/AddCollection?brandId=${this.newCollectionBrandId}`, this.newCollection);

                        // Handle the response or perform any necessary logic
                        if (response.status === 200) {
                            // Additional logic after successful product addition
                            this.$q.notify({
                                color: 'green-4',
                                textColor: 'white',
                                icon: 'cloud_done',
                                message: 'New Collection added successfully!'
                            });
                            this.closeCollectionDialog();
                            this.onReset();
                        } else {
                            // Log detailed error information
                            console.error(response);

                            // Handle the case where the API call was not successful
                            this.$q.notify({
                                color: 'red-4',
                                textColor: 'white',
                                icon: 'error',
                                message: 'Error adding Collection. Please check the console for details.'
                            });
                        }
                    } catch (error) {
                        // Log detailed error information
                        console.error(error);

                        // Hide loading indicator in case of an error
                        this.$q.loading.hide();

                        this.$q.notify({
                            color: 'red-4',
                            textColor: 'white',
                            icon: 'error',
                            message: 'Error adding Collection. Please check the console for details.'
                        });
                    }
                }, //ef

                async editCollection(item) {
                    try {
                        const response = await axios.post("myapi/EditCollection", item);
                        console.log("Request data:", item);
                        console.log("Response data:", response.data);

                        if (response.status >= 200 && response.status < 300) {
                            console.log("Request successful");
                        } else {
                            console.error("Unexpected response status:", response.status);
                        }
                    } catch (error) {
                        console.error("Error during request:", error);

                        if (error.response?.data?.errors) {
                            console.error("Validation errors:", error.response.data.errors);
                        }
                    }
                }
                , //ef

async deleteCollection() {
          try {
            // Send the delete request
            const reponse = await axios.post(`/myapi/DeleteBrandWithCollection?brandWithCollectionId=${this.brandCollectionIdToDelete}`);
            this.brandCollectionIdToDelete = 0;
            window.location.reload();
            console.log("Delete response:", response.data);


            // Set a flag in local storage indicating successful delete
            localStorage.setItem('deleteSuccess', 'true');

            // Refresh the page
            window.location.reload();
          } catch (error) {
            console.error('Error deleting collection', error);

            // Notify the user about the error
            this.$q.notify({
              type: 'negative',
              color: 'red-8',
              message: 'Error deleting collection'
            });
          }
        },
  
                async onReset() {
                    const notif = this.$q.notify({
                        type: 'ongoing',
                        message: 'Resetting...'
                    });

                    try {
                        // Reset the brandRows array to an empty array
                        this.brandRows = [];

                        // Call the API to get delivery services data again
                        const brand = await axios.get("/myapi/GetBrands");
                        this.brandRows = brand.data;

                        // Notify the user that the reset was successful
                        notif({
                            type: 'positive',
                            message: 'Reset successful',
                            timeout: 300
                        });
                    } catch (error) {
                        // Notify the user if an error occurs during the reset process
                        notif({
                            type: 'negative',
                            message: 'Failed to reset. Please try again.',
                            timeout: 300
                        });
                        console.error('Error resetting deliveries data:', error);
                    }


                }
                , 

        



      }
      , //ef


      
      

      //computed
      computed: {

      }
      ,

      //created
      async created() {
        try {
          var response = await axios.get("/api/GetProducts");
          this.originalProducts = response.data;
          this.products = response.data.map(product => ({ ...product, showImageDialog: false }));
          console.log(this.products);
        } catch (error) {
          console.log(error);
        }


          try {
                        var brand = await axios.get("/myapi/GetBrands");
                        this.brandRows = brand.data;
                        console.log(brand.data);

                    }
                    catch (error) {
                        console.log(error);
                    }

      
      }//ecreated
      ,
      //mounted
      mounted() {

      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>

}