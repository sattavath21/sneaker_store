<div id="app1">

  <div class="text-h5 text-weight-bold text-white q-pa-lg"
     style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
            Product Information</div>
  <q-table class="bg-grey-2" title="Product Information" :rows="checkProducts" :columns="columns">

    <template v-slot:top-left>
      <div class="text-h6 q-pa-md">Product Details <q-btn icon="restart_alt" round class="q-mx-lg" size="md"
          color="grey" @@click="onReset"></q-btn></div>
      <q-separator vertical class="q-my-sm"></q-separator>
      <div class="q-pl-sm">
        <q-input debounce="200" dense v-model="searchText" type="text" @@change="searchProduct">
          <template v-slot:prepend>
            <q-icon name="search"></q-icon>
          </template>
        </q-input>

      </div>

    </template>
    <template v-slot:body="props">
      <q-tr :props="props">
        <q-td key="index" :props="props">{{ checkProducts.indexOf(props.row) + 1 }}</q-td>
        <q-td key="product.productName" :props="props">
          {{ props.row.product.productName }}
          <q-popup-edit v-model="props.row.product.productName">
            <q-input v-model="props.row.product.productName" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="product.barcode" :props="props">{{ props.row.product.barcode}}</q-td>
        <q-td key="checkInQty" :props="props">{{ props.row.checkInQty}}</q-td>
        <q-td key="checkin.checkInDate" :props="props">{{ new Date(props.row.checkin.checkInDate).toLocaleDateString()
          }}</q-td>
        <q-td key="product.productDescription" :props="props">
          {{ props.row.product.productDescription }}
          <q-popup-edit v-model="props.row.product.productDescription">
            <q-input v-model="props.row.product.productDescription" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="checkin.staff.firstName" :props="props">{{ props.row.checkin.staff.firstName}}</q-td>
        <q-td key="product.productUnit" :props="props">
          {{ props.row.product.productUnit }}
          <q-popup-edit v-model="props.row.product.productUnit">
            <q-input v-model="props.row.product.productUnit" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="product.supplier.supplierName" :props="props">{{ props.row.product.supplier.supplierName}}</q-td>
        <q-td key="checkin.creditTerm" :props="props">{{ props.row.checkin.creditTerm}}</q-td>
        <q-td key="product.productCost" :props="props">
          {{ props.row.product.productCost }}
          <q-popup-edit v-model="props.row.product.productCost">
            <q-input v-model="props.row.product.productCost" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="product.productPrice" :props="props">
          {{ props.row.product.productPrice }}
          <q-popup-edit v-model="props.row.product.productPrice">
            <q-input v-model="props.row.product.productPrice" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="product.productMake" :props="props">
          {{ props.row.product.productMake }}
          <q-popup-edit v-model="props.row.product.productMake">
            <q-input v-model="props.row.product.productMake" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="product.productModelno" :props="props">
          {{ props.row.product.productModelno }}
          <q-popup-edit v-model="props.row.product.productModelno">
            <q-input v-model="props.row.product.productModelno" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="product.productType" :props="props">
          {{ props.row.product.productType }}
          <q-popup-edit v-model="props.row.product.productType">
            <q-input v-model="props.row.product.productType" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCheckProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="actions" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="backspace"></q-btn>
          <q-dialog v-model="confirm" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this product?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>
        </q-td>
      </q-tr>
    </template>
  </q-table>

  <div class="bg-grey-9 q-pa-sm"></div>
  <q-form class=" bg-white q-pa-lg">
    <div class="q-ma-sm">
      <q-input ref="input1" v-model="item.barcode" label="Input Barcode" @@change="item_change">
      </q-input>
      <div class="q-ma-sm">
        <q-input v-model="item.barcode2" label="Scanned Barcode"></q-input>

      </div>
    </div>

    <q-separator vertical class="q-my-xl"></q-separator>
    <q-table class="bg-grey-2" title="Check In Qty Update List" :rows="scanProducts" :columns="columns2">
      <template v-slot:body="props">
        <q-tr :props="props">
          <q-td key="index" :props="props">{{ scanProducts.indexOf(props.row) + 1 }}</q-td>
          <q-td key="productName" :props="props">
            {{ props.row.productName }}
          </q-td>
          <q-td key="checkInQty" :props="props">
            {{ props.row.checkInQty }}
            <q-popup-edit v-model.number="props.row.checkInQty" buttons v-slot="scope">
              <q-input type="number" v-model.number="scope.value" dense autofocus @@keyup.enter="scope.set" />
            </q-popup-edit>
          </q-td>
          <q-td key="checkinDate" :props="props">
            {{ new Date(props.row.checkinDate).toLocaleDateString() }}
          </q-td>
          <q-td key="checkinCredit" :props="props">
            {{ props.row.checkinCredit }}
          </q-td>
          <q-td key="productCost" :props="props">
            {{ props.row.productCost }}
          </q-td>
          <q-td key="productPrice" :props="props">
            {{ props.row.productPrice }}
          </q-td>
          <q-td key="productMake" :props="props">
            {{ props.row.productMake }}
          </q-td>
          <q-td key="productUnit" :props="props">
            {{ props.row.productUnit }}
          </q-td>

          <q-td key="actions" :props="props">
            <q-btn color="blue-grey-6" @@click="confirm2 = true" icon="system_update_alt"
              label="Update"></q-btn>
            <q-btn class="q-ma-sm" color="red-6" @@click="deleteAddQtyRow(props.row)" icon="close"></q-btn>
            <q-dialog v-model="confirm2" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Update products Qty?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="blue-grey-6" @@click="editCheckInItem(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>
          </q-td>
        </q-tr>
      </template>
    </q-table>
  </q-form>

  <q-btn class="q-my-lg" color="primary" icon="add_box" label="Add Product" size="lg"
    onclick='window.location="/Product/AddPro"'></q-btn>

</div>

@section code{
  <script>
    var option = {
      //data
      data() {
        return {
          item: {
            barcode: '',
            barcode2: ''
          },
          originalProducts: [],
          confirm: false,
          confirm2: false,
          searchText: "",
          scanProducts: [],
          columns2: [
            {
              name: 'index',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'productName',
              label: 'Product Name',
              field: 'productName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'checkInQty',
              label: 'Quantity On Hand',
              field: 'checkInQty',
              sortable: true,
              align: 'center'
            },
            {
              name: 'checkinDate',
              label: 'Check In Date',
              field: 'checkinDate',
              sortable: true,
              align: 'center'
            },
            {
              name: 'checkinCredit',
              label: 'Credit',
              field: 'checkinCredit',
              sortable: true,
              align: 'center'
            },
            {
              name: 'productCost',
              label: 'Product Cost',
              field: 'productCost',
              sortable: true,
              align: 'center'
            },
            {
              name: 'productPrice',
              label: 'Product Price',
              field: 'productPrice',
              sortable: true,
              align: 'center'
            },
            {
              name: 'productMake',
              label: 'Product Make',
              field: 'productMake',
              sortable: true,
              align: 'center'
            },
            {
              name: 'productUnit',
              label: 'Product Unit',
              field: 'productUnit',
              sortable: true,
              align: 'center'
            },
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            }
          ],
          checkProducts: []
          ,
          columns: [
            {
              name: 'index',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'product.productName',
              label: 'Product Name',
              field: 'product.productName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'product.barcode',
              label: 'Barcode',
              field: 'product.barcode',
              sortable: true,
              align: 'center'
            },
            {
              name: 'checkInQty',
              label: 'Check In Qty',
              field: 'checkInQty',
              sortable: true,
              align: 'center'
            },
            {
              name: 'checkin.checkInDate',
              label: 'Check In Date',
              field: 'checkin.checkInDate',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.productDescription',
              label: 'Product Description',
              field: 'product.productDescription',
              sortable: true,
              align: 'center'
            },
            {
              name: 'checkin.staff.firstName',
              label: 'Staff',
              field: 'checkin.staff.firstName',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.productUnit',
              label: 'Product Unit',
              field: 'product.productUnit',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.supplier.supplierName',
              label: 'Supplier Name',
              field: 'product.supplier.supplierName',
              sortable: true,
              align: 'center'
            },
            {
              name: 'checkin.creditTerm',
              label: 'Credit Term ',
              field: 'checkin.creditTerm',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.productCost',
              label: 'Product Cost',
              field: 'product.productCost',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.productPrice',
              label: 'Product Price',
              field: 'product.productPrice',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.productMake',
              label: 'Product Make',
              field: 'product.productMake',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.productModelno',
              label: 'Product Model No',
              field: 'product.productModelno',
              sortable: true,
              align: 'center'
            },
            {
              name: 'product.productType',
              label: 'Product Type',
              field: 'product.productType',
              sortable: true,
              align: 'center'
            },
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            }
          ]
        };
      }
      ,
      //methods
      methods: {
        async item_change() {
          this.item.barcode2 = this.item.barcode;
          console.log(this.item.barcode);
          //data is object notation
          try {
            var url = '/api/ProductByBarcode?barcode=' + this.item.barcode;
            var res = await axios.get(url);
            this.item.barcode = '';
            console.log(res.data);
            console.log(typeof res.data);
          }
          catch (error) {
            console.log(error);
          }
          if (res.data.status != -1) {

            var index = this.scanProducts.findIndex(item => item.productId === res.data.result.productId);
            console.log("index", index);

            if (index !== -1) {
              this.scanProducts[index].checkInQty += 1;
              this.item.barcode = '';
              this.$refs.input1.$el.focus();
            }
            else {
              var store = this.scanProducts.push(res.data.result);
              var data1 = JSON.stringify(store);
              window.localStorage.setItem('global', data1);
              var result = window.localStorage.getItem('global');
              var newObject = JSON.parse(result);
              console.log("newObject", newObject);

            }
          }
          else {
            this.$q.notify({
              type: 'warning',
              message: 'Not found'
            })
          }

        },
        async editCheckProduct(item) {
          var product = { ...item.product };
          delete product.supplier;
          console.log(product);

          var url = "api/EditProduct";
          try {
            console.log(item);
            var result = await axios.post(url, product);
            console.log(result.data);
          }
          catch (error) {
            console.log(error);
          }

        }//ef
        ,
        async editCheckInItem(item) {

          var url = "api/EditCheckInItem";
          try {
            console.log(item);
            var result = await axios.post(url, item);
            console.log(result.data);
            this.scanProducts = [],
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'Update completed'
              })
            try {
              var response = await axios.get("/api/GetCheckInItem");
              this.originalProducts = response.data;
              this.checkProducts = response.data;
              console.log(this.checkProducts);
            }
            catch (error) {
              console.log(error);
            }
          }
          catch (error) {
            console.log(error);
          }

        }//ef
        ,
        async deleteProduct(item) {
          console.log(item);
          var url = "/api/DeleteProduct";
          var del = item
          var result = await axios.post(url, del);
          this.checkProducts = this.checkProducts.filter(x => x.product.productId != item.product.productId);
          this.$q.notify({
            type: 'negative',
            color: "red-8",
            message: 'Product had been deleted'
          })
        }//ef
        ,
        async deleteAddQtyRow(item) {
          console.log(item);
          this.scanProducts = this.scanProducts.filter(x => x.productId != item.productId);
        }//ef
        ,
        searchProduct() {
          if (this.searchText !== "") {
            this.checkProducts = this.originalProducts.filter(x => x.product.productName.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.checkin.staff.firstName.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.product.productMake.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.product.productUnit.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.product.productType.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.product.productModelno.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.product.supplier.supplierName.toLowerCase().includes(this.searchText.toLowerCase())
            )
            console.log(this.searchText);
          }
          else {
            console.log(this.checkProducts);
            this.checkProducts = [...this.originalProducts]
            const notif = this.$q.notify({
              type: 'ongoing',
              message: 'Loading...'
            })

            // simulate delay
            setTimeout(() => {
              notif({
                type: 'positive',
                message: 'Reseted',
                timeout: 300
              })
            }, 600)
          }
        }
        ,
        onReset() {
          const notif = this.$q.notify({
            type: 'ongoing',
            message: 'Loading...'
          })

          // simulate delay
          setTimeout(() => {
            notif({
              type: 'positive',
              message: 'Reseted',
              timeout: 300
            })
          }, 600)
          this.checkProducts = [...this.originalProducts]
          this.searchText = ""
        }

      }
      ,
      //computed
      computed: {

      }
      ,
      //created
      async created() {
        try {
          var response = await axios.get("/api/GetCheckInItem");
          this.originalProducts = response.data;
          this.checkProducts = response.data;
          console.log(this.checkProducts);
        }
        catch (error) {
          console.log(error);
        }


      }//ecreated
      ,
      //mounted
      mounted() {
        this.$refs.input1.$el.focus()
      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>

}