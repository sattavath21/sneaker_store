<div id="app1">

  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
    Product Information</div>
  <q-table class="bg-grey-2" title="Product Information" :rows="products" :columns="columns">

    <template v-slot:top-left>
      <div class="text-h6 q-pa-md">Product Details <q-btn icon="restart_alt" round class="q-mx-lg" size="md"
          color="grey" @@click="onReset"></q-btn></div>
      <q-separator vertical class="q-my-sm"></q-separator>
      <div class="q-pl-sm">
        <q-input debounce="200" dense v-model="searchText" type="text" @@change="searchProduct">
          <template v-slot:prepend>
            <q-icon name="search"></q-icon>
          </template>
        </q-input>

      </div>

    </template>
    <template v-slot:body="props">
      <q-tr :props="props">
        <q-td key="actions" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
            size="15px"></q-btn>
          <q-dialog v-model="confirm" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this product?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>
        </q-td>
        <q-td key="index" :props="props">{{ products.indexOf(props.row) + 1 }}</q-td>
        <q-td key="name" :props="props">
          {{ props.row.name }}
          <q-popup-edit v-model="props.row.name">
            <q-input v-model="props.row.name" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="storePrice" :props="props">{{ props.row.storePrice}}
          <q-popup-edit v-model="props.row.storePrice">
            <q-input v-model="props.row.storePrice" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="lowestSellingPrice" :props="props">{{ props.row.lowestSellingPrice}}</q-td>
        <q-td key="sku" :props="props">{{ props.row.sku}}
          <q-popup-edit v-model="props.row.sku">
            <q-input v-model="props.row.sku" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="colorway" :props="props">
          {{ props.row.colorway }}
          <q-popup-edit v-model="props.row.colorway">
            <q-input v-model="props.row.colorway" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="releaseDate" :props="props">
          <q-input filled v-model="props.row.releaseDate" mask="date" style="width: 165px;">
            <template v-slot:append>
              <q-icon name="event" class="cursor-pointer">
                <q-popup-proxy cover transition-show="scale" transition-hide="scale">
                  <q-date v-model="props.row.releaseDate" landscape color="red">
                    <div class="row items-center justify-end">
                      <q-btn v-close-popup label="Change" color="red" flat @@click="editProduct(props.row)"></q-btn>
                      <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
                    </div>
                  </q-date>
                </q-popup-proxy>
              </q-icon>
            </template>
          </q-input>
        </q-td>




        <q-td key="amountSold" :props="props">{{ props.row.amountSold}}</q-td>
        <q-td key="inventoryQty" :props="props">{{ props.row.productWithSizes && props.row.productWithSizes.length > 0 ?
          props.row.productWithSizes[0].inventoryQty : '' }}
          <q-popup-edit v-model="props.row.productWithSizes[0].inventoryQty">
            <q-input v-model="props.row.productWithSizes[0].inventoryQty" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="sizeType" :props="props">
          {{
          props.row.productWithSizes &&
          props.row.productWithSizes.length > 0 &&
          props.row.productWithSizes[0].shoeSize &&
          props.row.productWithSizes[0].shoeSize.sizeType !== null
          ? props.row.productWithSizes[0].shoeSize.sizeType
          : 'N/A'
          }}
          <q-popup-edit v-model="props.row.productWithSizes[0].shoeSize.sizeType">
            <q-input v-model="props.row.productWithSizes[0].shoeSize.sizeType" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="sizeNumber" :props="props">
          {{
          props.row.productWithSizes &&
          props.row.productWithSizes.length > 0 &&
          props.row.productWithSizes[0].shoeSize &&
          props.row.productWithSizes[0].shoeSize.sizeNumber !== null
          ? props.row.productWithSizes[0].shoeSize.sizeNumber
          : 'N/A'
          }}
          <q-popup-edit v-model="props.row.productWithSizes[0].shoeSize.sizeNumber">
            <q-input v-model="props.row.productWithSizes[0].shoeSize.sizeNumber" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>


        <q-td key="collectionName" :props="props">
          {{ props.row.productCollection.collectionName }}
          <q-popup-edit v-model="props.row.productCollection.collectionName">
            <q-input v-model="props.row.productCollection.collectionName" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="brandName" :props="props">
          {{ props.row.productCollection ? props.row.productCollection.brand.brandName : '' }}
          <q-popup-edit v-model="props.row.productCollection.brand.brandName">
            <q-input v-model="props.row.productCollection.brand.brandName" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>

        </q-td>
        <q-td key="brandLogo" :props="props">
          {{ props.row.productCollection ? props.row.productCollection.brand.brandLogo : '' }}
          <q-popup-edit v-model="props.row.productCollection.brand.brandLogo">
            <q-input v-model="props.row.productCollection.brand.brandLogo" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="catName" :props="props">
          {{ props.row.productCat.catName }}
          <q-popup-edit v-model="props.row.productCat.catName">
            <q-input v-model="props.row.productCat.catName" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
        <q-td key="productImageUrl" :props="props">
          {{ props.row.productImages && props.row.productImages.length > 0 ?
          props.row.productImages[0].productImageUrl : '' }}
          <q-popup-edit v-model="props.row.productImages[0].productImageUrl">
            <q-input v-model="props.row.productImages[0].productImageUrl" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
      </q-tr>
    </template>
  </q-table>

  <div class="bg-grey-9 q-pa-sm" style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"></div>


  <q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 50px;" color="green" icon="add_box"
    label="Add Product" size="md" onclick='window.location="/Product/AddPro"'></q-btn>


</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          products: [],
          originalProducts: [],
          confirm: false,
          confirm2: false,
          searchText: "",
          columns: [
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },
            {
              name: 'index',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'name',
              label: 'Product Name',
              field: 'name',
              sortable: true,
              align: 'center',

            },
            {
              name: 'storePrice',
              label: 'Store Price',
              field: 'storePrice',
              sortable: true,
              align: 'center',

            },
            {
              name: 'lowestSellingPrice',
              label: 'Lowest Selling Price',
              field: 'lowestSellingPrice',
              sortable: true,
              align: 'center',

            },
            {
              name: 'sku',
              label: 'SKU',
              field: 'sku',
              sortable: true,
              align: 'center',

            },
            {
              name: 'colorway',
              label: 'Colorway',
              field: 'colorway',
              sortable: true,
              align: 'center',

            },
            {
              name: 'releaseDate',
              label: 'Release Date',
              field: 'releaseDate',
              sortable: true,
              align: 'center',

            },
            {
              name: 'amountSold',
              label: 'Amount Sold',
              field: 'amountSold',
              sortable: true,
              align: 'center',

            },
            {
              name: 'inventoryQty',
              label: 'Inventory Qty',
              field: 'productWithSizes[0].inventoryQty',
              sortable: true,
              align: 'center',
            },
            {
              name: 'sizeType',
              label: 'Size Type',
              field: 'productWithSizes[0].shoeSize.sizeType',
              sortable: true,
              align: 'center',
            },
            {
              name: 'sizeNumber',
              label: 'Size Number',
              field: 'productWithSizes[0].shoeSize.sizeNumber',
              sortable: true,
              align: 'center',
            },
            {
              name: 'collectionName',
              label: 'Product Collection',
              field: 'productCollection.collectionName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'brandName',
              label: 'Brand Name',
              field: 'productCollection.brand.brandName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'brandLogo',
              label: 'Brand Logo',
              field: 'productCollection.brand.brandLogo',
              sortable: true,
              align: 'center',

            },
            {
              name: 'catName',
              label: 'Product Cat',
              field: 'productCat.catName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'productImageUrl',
              label: 'Product Images',
              field: 'productImages[0].productImageUrl',
              sortable: true,
              align: 'center',

            },
          ]
        };
      }
      ,
      //methods
      methods: {
        async editProduct(item) {
          try {
            item.releaseDate = new Date(item.releaseDate).toISOString();

            const response = await axios.post("api/EditProduct", item);

            console.log("Request data:", item);
            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
            } else {
              console.error("Unexpected response status:", response.status);
            }
          } catch (error) {
            console.error("Error during request:", error);

            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }
        }
        ,
        async deleteProduct(item) {
          console.log(item);
          var url = "/api/DeleteProduct";
          var del = item;

          try {
            // Send the delete request
            await axios.post(url, del);

            // Use the correct property name in the filter callback
            this.products = this.products.filter(x => x.productId !== item.productId);

            // Set a flag in local storage indicating successful delete
            localStorage.setItem('deleteSuccess', 'true');

            // Refresh the page
            window.location.reload();
          } catch (error) {
            console.error('Error deleting delivery branch:', error);

            // Notify the user about the error
            this.$q.notify({
              type: 'negative',
              color: 'red-8',
              message: 'Error deleting delivery branch'
            });
          }
        }
        ,
        searchProduct() {
          if (this.searchText !== "") {
            this.products = this.originalProducts.filter(product => {
              const searchTextLower = this.searchText.toLowerCase();

              return (
                product.name.toLowerCase().includes(searchTextLower) ||
                product.sku.toLowerCase().includes(searchTextLower) ||
                product.colorway.toLowerCase().includes(searchTextLower) ||
                (
                  product.productWithSizes.length > 0 &&
                  product.productWithSizes[0].shoeSize &&
                  product.productWithSizes[0].shoeSize.sizeType &&
                  product.productWithSizes[0].shoeSize.sizeType.toLowerCase().includes(searchTextLower)
                ) ||
                (
                  product.productWithSizes.length > 0 &&
                  product.productWithSizes[0].shoeSize &&
                  product.productWithSizes[0].shoeSize.sizeNumber !== null &&
                  product.productWithSizes[0].shoeSize.sizeNumber !== undefined &&
                  String(product.productWithSizes[0].shoeSize.sizeNumber).toLowerCase().includes(searchTextLower)
                ) ||
                product.productCollection.collectionName.toLowerCase().includes(searchTextLower) ||
                product.productCollection.brand.brandName.toLowerCase().includes(searchTextLower) ||
                product.productCollection.brand.brandLogo.toLowerCase().includes(searchTextLower) ||
                product.productCat.catName.toLowerCase().includes(searchTextLower)
              );
            });

            console.log(this.searchText);
          }
          else {
            console.log(this.products);
            this.products = [...this.originalProducts]
            const notif = this.$q.notify({
              type: 'ongoing',
              message: 'Loading...'
            })

            // simulate delay
            setTimeout(() => {
              notif({
                type: 'positive',
                message: 'Reseted',
                timeout: 300
              })
            }, 600)
          }
        }
        ,
        onReset() {
          const notif = this.$q.notify({
            type: 'ongoing',
            message: 'Loading...'
          })

          // simulate delay
          setTimeout(() => {
            notif({
              type: 'positive',
              message: 'Reseted',
              timeout: 300
            })
          }, 600)
          this.products = [...this.originalProducts]
          this.searchText = ""
        }

      }
      ,
      //computed
      computed: {

      }
      ,
      //created
      async created() {
        try {
          var response = await axios.get("/api/GetProducts");
          this.originalProducts = response.data;
          this.products = response.data;
          console.log(this.products);
        }
        catch (error) {
          console.log(error);
        }


      }//ecreated
      ,
      //mounted
      mounted() {

      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>

}