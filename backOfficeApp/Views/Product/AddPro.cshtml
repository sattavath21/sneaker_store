<div id="app1">
    <div class="text-h4 text-weight-bold text-white bg-grey-9 q-pa-lg">Product Information</div>
    <q-card class="my-card bg-grey-2">
        <q-card-section class="bg-cyan text-white">
            <div class="text-h6">Add New Product</div>
        </q-card-section>

    <div class="q-ma-sm">
            <q-input ref="input1" v-model="barcodeScan" label="Input Barcode" @@change="item_change">
            </q-input>
            <div class="q-ma-sm">
                <q-input v-model="product.barcode" label="Scanned Barcode"></q-input>

            </div>
        </div>
        <q-separator vertical class="q-my-md"></q-separator>
        <div class="text-h6 q-pa-lg">Product Information</div>

        <q-input class="q-px-sm" filled v-model="product.productName" label="Product Name" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.costPrice" label="Cost Price" hint="Number only" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.sellingPrice" label="Selling Price" hint="Number only" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.sku" label="SKU" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.colorway" label="Colorway" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.releaseDate" mask="date" style="width: 300px;">
            <template v-slot:append>
                <q-icon name="event" class="cursor-pointer">
                    <q-popup-proxy cover transition-show="scale" transition-hide="scale">
                        <q-date v-model="product.releaseDate" landscape color="red">
                            <div class="row items-center justify-end">
                                <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
                            </div>
                        </q-date>
                    </q-popup-proxy>
                </q-icon>
            </template>
        </q-input>

        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.productWithSizes[0].inventoryQty" label="Inventory Quantity"
            hint="Number only" lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>
         <q-select
      filled
      v-model="selectedSizeType"
      :options="sizeTypeOptions"
      label="Select Size Type"
      lazy-rules
      :rules="[ val => val && val.length > 0 || 'Please select a size type']"
    ></q-select>
<q-separator vertical class="q-my-md"></q-separator>
    <q-select
      filled
      v-model="selectedSizeNumber"
      :options="sizeNumberOptions"
      label="Select Size Number"
      lazy-rules
      :rules="[ val => val && val.length > 0 || 'Please select a size number']"
    ></q-select>
<q-separator vertical class="q-my-md"></q-separator>
        <q-input class="q-px-sm" filled v-model="product.productCollection.collectionName" label="Collection Name"
            lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.productCollection.brand.brandName" label="Brand Name"
            lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>

        <q-input class="q-px-sm" filled v-model="product.productImage.productImagePath" label="Product Image URLs"
            hint="Enter the URL" lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']">
        </q-input>

        <q-separator vertical class="q-my-md"></q-separator>
        <div class="justify-end row">
            <q-btn icon="restart_alt" class="q-mx-lg" color="grey" @@click="onReset" size="lg"></q-btn>
        </div>
        <q-separator vertical class="q-my-md"></q-separator>
        <q-card-actions align="left">
            <q-btn label="Submit" icon="arrow_downward" type="submit" color="primary" class="text-h7 q-mx-sm q-my-lg"
                size="lg" @@click="confirm = true"></q-btn>
            <q-dialog v-model="confirm" persistent>
                <q-card>
                    <q-card-section class="row items-center">
                        <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                        <span class="q-ml-sm">Add this product?</span>
                    </q-card-section>

                    <q-card-actions align="center">
                        <q-btn class="q-ma-sm" color="grey-9" @@click="addProduct" label="Yes" v-close-popup></q-btn>
                        <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
                    </q-card-actions>
                </q-card>
            </q-dialog>
            <q-btn icon="arrow_back" label="Back" color="grey-7" class="text-h7 text-white" size="lg"
                onclick='window.location="/product"'></q-btn>
            <q-dialog v-model="completedDialog">
                <q-card class="bg-indigo-1">
                    <q-card-section>

                        <div class="text-h6">
                            Done!
                            <q-icon name="done">
                            </q-icon>

                        </div>
                    </q-card-section>

                    <q-card-section class="q-pt-none">
                        New product Information had been added
                    </q-card-section>
                    <q-card-actions align="right">
                        <q-btn flat label="Check" color="indigo" v-close-popup
                            onclick='window.location="/product"'></q-btn>
                        <q-btn flat label="Close" icon="close" color="grey" v-close-popup></q-btn>
                    </q-card-actions>
                </q-card>
            </q-dialog>
        </q-card-actions>
    </q-card>

    <div class="bg-grey-9 q-pa-sm" style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"></div>
</div>

@section code {
    <script>
        var option = {
            //data
            data() {
                return {
                    selectedSizeType: null,
      selectedSizeNumber: null,
      sizeTypeOptions: [],
      sizeNumberOptions: [],
                    barcodeScan: '',
                    confirm: false,
                    product: {
                        barcode: "",
                        productName: "Jordan 4 Retro Thunder (2023)",
                        costPrice: 7400,
                        sellingPrice: 6500,
                        sku: "DH6927-017",
                        colorway: "BLACK/TOUR YELLOW",
                        releaseDate: "2023/05/13",
                        amountSold: 1494,
                        productWithSizes: [
                            {
                                inventoryQty: 20,
                                shoeSize: {
                                    sizeType: "EU",
                                    sizeNumber: 38.5
                                }
                            }
                        ],
                        productCollection: {
                            collectionName: "Jordan 1",
                            brand: {
                                brandName: "Jordan"
                            }
                        },
                        productImage:  {
                                productImagePath: "git.com/?saddr=17.995622,102.6241915&daddr=17.99646520515873,102.62392149999998"
                        }
                        
                    },
                    completedDialog: false,
                };
            }
            ,
            //methods
            methods: {
                async item_change() {
                    this.product.barcode = this.barcodeScan;
                    //data is object notation
                    try {
                        var url = '/api/GetProductByBarcodeAdd?barcode=' + this.product.barcode;
                        var res = await axios.get(url);
                        this.barcodeScan = '';
                        if (res.data) {
                            this.$q.notify({
                                type: 'warning',
                                message: 'This barcode already in stock'
                            })
                            this.product.barcode ='';
                        }
                        else {
                            this.$q.notify({
                                type: 'positive',
                                message: 'This barcode can be add'
                            })
                        }
                    }
                    catch (error) {
                        console.log(error);
                    }

                },
                formatReleaseDate(dateString) {
                    const date = new Date(dateString);

                    // Add one day to the date
                    date.setDate(date.getDate() + 1);

                    // Set time to midnight
                    date.setHours(0, 0, 0, 0);

                    // Convert to ISO string and extract the date part
                    const formattedDate = date.toISOString().split('T')[0];

                    return formattedDate;
                }

                ,
                async addProduct() {
                    try {
                        console.log("Product Object:", this.product);
                        // Make the API call
                        this.product.releaseDate = this.formatReleaseDate(this.product.releaseDate);
                        console.log("Formatted Release Date:", this.formatReleaseDate(this.product.releaseDate));
                        var response = await axios.post("/api/AddProduct", this.product);

                        // Handle the response or perform any necessary logic
                        if (response.status === 200) {
                            // Additional logic after successful product addition
                            this.$q.notify({
                                color: 'green-4',
                                textColor: 'white',
                                icon: 'cloud_done',
                                message: 'Product added successfully!'
                            });

                            // Clear form fields and reset data after successful addition
                            this.onReset();

                            // Show the completed dialog
                            this.completedDialog = true;
                        } else {
                            // Log detailed error information
                            console.error(response);

                            // Handle the case where the API call was not successful
                            this.$q.notify({
                                color: 'red-4',
                                textColor: 'white',
                                icon: 'error',
                                message: 'Error adding product. Please check the console for details.'
                            });
                        }
                    } catch (error) {
                        // Log detailed error information
                        console.error(error);

                        // Hide loading indicator in case of an error
                        this.$q.loading.hide();

                        this.$q.notify({
                            color: 'red-4',
                            textColor: 'white',
                            icon: 'error',
                            message: 'Error adding product. Please check the console for details.'
                        });
                    }
                },
async fetchSizeData() {
      try {
        const response = await axios.get("/api/GetShoeSizes"); // Replace "/api/sizeData" with your actual endpoint
        this.sizeTypeOptions = response.data.map(size => size.sizeType); // Assuming response.data is an array of ShoeSize objects
        this.sizeNumberOptions = response.data.map(size => size.sizeNumber); // Modify accordingly if structure is different
      } catch (error) {
        console.error("Error fetching size data: ", error);
      }
    },
                
                onReset() {
                    // Show an ongoing notification
                    const notif = this.$q.notify({
                        type: 'ongoing',
                        message: 'Resetting...'
                    });

                    // Simulate delay for 715 milliseconds
                    setTimeout(() => {
                        notif({
                            type: 'positive',
                            message: 'Reset complete',
                            timeout: 315
                        });

                        // Reset the form fields and data
                        this.product = {
                            productName: "",
                            costPrice: null,
                            sellingPrice: null,
                            sku: "",
                            colorway: "",
                            releaseDate: "",
                            amountSold: null,
                            productWithSizes: [
                                {
                                    inventoryQty: null,
                                    shoeSize: {
                                        sizeType: "",
                                        sizeNumber: null
                                    }
                                }
                            ],
                            productCollection: {
                                collectionName: "",
                                brand: {
                                    brandName: ""
                                }
                            },
                            productImage: {
                                    productImagePath: ""
                            }
                            
                        };

                        // Clear the input field for image URL
                        this.imageUrlToAdd = "";
                    }, 715);
                }



            }//emethod
            ,
            //computed
            computed: {

            }
            ,
            //created
            created() {

            }
            ,
            //mounted
            mounted() {
this.fetchSizeData();
            }

        };

        const app = Vue.createApp(option);
        app.use(Quasar)
        app.mount('#app1')
    </script>
}