@{
    ViewData["Title"] = "ໂປຣໂມຊັ່ນ";
}

<div id="app1">

  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */;
            ">
    ໜ້າຈັດການໂປຣໂມຊັ່ນ
  </div>

  <q-table class="bg-grey-2" title="Discount Information" :rows="discounts" :columns="discountColumns"
    :filter="searchText" table-header-style="font-size: 16px; ">

    <template v-slot:top-left>
      <div class="text-h6 q-pa-md">Discount Information</div>
      <q-separator vertical class="q-my-sm"></q-separator>
    </template>

    <template v-slot:body="props">
      <q-tr :props="props">
        <q-td key="actions" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
            size="15px"></q-btn>
          <q-dialog v-model="confirm" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this discount?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteDiscount(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>
        </q-td>

        <q-td key="discountIndex" :props="props">{{ discounts.indexOf(props.row) + 1 }}</q-td>

        <q-td key="description" :props="props">
          {{ props.row.description }}
          <q-popup-edit v-model="props.row.description">
            <q-input v-model="props.row.description" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editDiscount(props.row)" icon="edit" label="Edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="discountPercentage" :props="props">
          {{ props.row.discountPercentage }}
          <q-popup-edit v-model="props.row.discountPercentage">
            <q-input v-model="props.row.discountPercentage" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editDiscount(props.row)" icon="edit" label="Edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="minSpend" :props="props">
                    &#3647;{{ formatPrice(props.row.minSpend) }}
          <q-popup-edit v-model="props.row.minSpend">
            <q-input v-model="props.row.minSpend" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editDiscount(props.row)" icon="edit" label="Edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="maxDiscountAmount" :props="props">
          &#3647;{{ formatPrice(props.row.maxDiscountAmount) }}
          <q-popup-edit v-model="props.row.maxDiscountAmount">
            <q-input v-model="props.row.maxDiscountAmount" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editDiscount(props.row)" icon="edit" label="Edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>


         <q-td key="start" :props="props">
          <q-input filled v-model="props.row.start" mask="date" style="width: 165px;" >
            <template v-slot:append>
              <q-icon name="event" class="cursor-pointer">
                <q-popup-proxy cover transition-show="scale" transition-hide="scale">
                  <q-date v-model="props.row.start" landscape color="red" today-btn>
                    <div class="row items-center justify-end">
                      <q-btn v-close-popup label="Change" color="red" flat @@click="formatDateString(props.row)"></q-btn>
                      <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
                    </div>
                  </q-date>
                </q-popup-proxy>
              </q-icon>
            </template>
          </q-input>
        </q-td>


        <q-td key="duration" :props="props">
          {{ props.row.duration }}
          <q-popup-edit v-model="props.row.duration">
            <q-input v-model="props.row.duration" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editDiscount(props.row)" icon="edit" label="Edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="endDate" :props="props">
          {{ calculateEndDate(props.row.start, props.row.duration) }}
        </q-td>


        <q-td key="amount" :props="props">
          {{ props.row.amount }}
          <q-popup-edit v-model="props.row.amount">
            <q-input v-model="props.row.amount" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editDiscount(props.row)" icon="edit" label="Edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="shippingMethodId" :props="props">
            <q-select
              class="q-px-sm"
              filled
              v-model="props.row.shippingMethodId"
              style="min-width: 300px; height: 10px margin: 10px; padding: 5px;"
              emit-value
              :options="shippingMethodOptions"
              options-cover
              map-options
              @@update:model-value="updateShippingMethod(props.row)" 
              
            >
            </q-select>        
</q-td>





        @* <q-td key="methodName" :props="props">
        <q-select v-model="props.row.selectedShippingMethod" :options="shippingMethodOptions" dense />
        </q-td> *@



      </q-tr>
    </template>
  </q-table>

  <q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 20px;" color="green" icon="add_box"
    label="Add new discount" size="md" onclick='window.location="/Discount/AddDis"'></q-btn>


</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          confirm: false,
          shippingMethodOptions: [],
          discounts: [],
          discountColumns: [
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },
            {
              name: 'discountIndex',
              field: 'discountIndex',
              align: 'center',
              sortable: true,
              label: 'No'
            },
            {
              name: 'description',
              label: 'Discount name',
              field: 'description',
              align: 'left',
              sortable: true,
            },
            {
              name: 'discountPercentage',
              label: 'Discount (%)',
              field: 'discountPercentage',
              align: 'center',
              sortable: true,
            },
            {
              name: 'minSpend',
              label: 'Minimal spend',
              field: 'minSpend',
              align: 'right',
              sortable: true,
            },
            {
              name: 'maxDiscountAmount',
              label: 'Maximum discount',
              field: 'maxDiscountAmount',
              align: 'right',
              sortable: true,
            },
            {
              name: 'start',
              label: 'Start date',
              field: 'start',
              align: 'center',
              sortable: true,
            },
            {
              name: 'duration',
              label: 'Discount duration (days)',
              field: 'duration',
              align: 'right',
              sortable: true,
            },
            {
              name: 'endDate',
              label: 'End Date',
              field: 'endDate',
              align: 'left',
              sortable: true,
            },
            {
              name: 'amount',
              label: 'Discount amount (unit)',
              field: 'amount',
              align: 'right',
              sortable: true,
            },

            {
              name: 'shippingMethodId',
              label: 'Shipping Method',
              field: 'selectedMethod',
              align: 'center',
              sortable: true,
            },
            ]
        };
      }
      ,
      //methods
      methods: {
        formatPrice(price) {
          // Convert the price to a string
          let formattedPrice = price.toString();

          // Use regex to add commas for every three digits
          formattedPrice = formattedPrice.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

          return formattedPrice;
        },
        async updateShippingMethod(item){
          item.shippingMethod.shippingMethodId = item.shippingMethodId;
          if (item.shippingMethodId == 1){
            item.shippingMethod.methodName = "In-store"
          } else{
            item.shippingMethod.methodName = "Delivery"
          }
          this.editDiscount(item);
        },
        async editDiscount(item) {
          try {
            const response = await axios.post("myapi/EditDiscount", item);
            console.log("Request data:", item);
            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'Discount Modified!'
              });

            } else {
              console.error("Unexpected response status:", response.status);
              this.$q.notify({
                color: 'red-4',
                textColor: 'white',
                icon: 'error',
                message: 'Reponse status not 200, please refresh.'
              });
            }
          } catch (error) {
            console.error("Error during request:", error);
            this.$q.notify({
                color: 'red-4',
                textColor: 'white',
                icon: 'error',
                message: 'Error during request'
              });
            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }
        }
        ,
         formatDateString(item) {
  // Split the date string by '/'
  const parts = item.start.split('/');
  // Construct a Date object
  const dateObject = new Date(parts[0], parts[1] - 1, parts[2]); // Months are 0-indexed in JavaScript Date objects
  // Add one day to the date
  dateObject.setDate(dateObject.getDate() + 1);
  // Use Date methods to construct the desired format
  const formattedDate = dateObject.toISOString().split('T')[0];
  item.start = formattedDate;
  this.editDiscount(item);
},

        async deleteDiscount(item) {
          console.log(item);
          var url = "/myapi/DeleteDiscount";
          var del = item;

          try {
            // Send the delete request
            await axios.post(url, del);

            // Use the correct property name in the filter callback
            this.discounts = this.discounts.filter(x => x.discountId !== item.discountId);

            // Set a flag in local storage indicating successful delete
            localStorage.setItem('deleteSuccess', 'true');

            // Refresh the page
            window.location.reload();
          } catch (error) {
            console.error('Error deleting discount:', error);

            // Notify the user about the error
            this.$q.notify({
              type: 'negative',
              color: 'red-8',
              message: 'Error deleting discount'
            });
          }
        },

        calculateEndDate(start, duration) {
          const startDate = new Date(start); // Convert start date string to Date object
          const endDate = new Date(startDate); // Create a copy of the start date

          // Add the duration in days to the start date
          endDate.setDate(startDate.getDate() + duration);

          // Format the end date as needed (e.g., to a specific format)
          // Example format: YYYY-MM-DD
          const formattedEndDate = endDate.toISOString().slice(0, 10);

          return formattedEndDate;
        },

        async fetchShippingMethods() {
          try {
            const response = await axios.get("/api/GetShippingMethodsSelection");
            // Map the data to the format required by q-select
            this.shippingMethodOptions = response.data.map(method => ({ label: method.methodName, value: method.shippingMethodId }));
            console.log("Shipping Methods:", this.shippingMethodOptions);
          } catch (error) {
            console.error("Error fetching shipping methods:", error);
          }
        },

    

      }
      ,



      //computed
      computed: {

      }
      ,
      //created
      async created() {
        try {
          var discountResponse = await axios.get("/myapi/GetDiscounts");
          this.discounts = discountResponse.data;
          this.fetchShippingMethods();
          console.log(discountResponse.data);
        }
        catch (error) {
          console.log(error);
        }



      }//ecreated
      ,
      //mounted
      mounted() {

      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>

}