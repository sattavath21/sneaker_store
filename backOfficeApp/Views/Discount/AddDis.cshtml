<div id="app1">
  <div class="text-h4 text-weight-bold text-white bg-grey-9 q-pa-lg">Discount Information</div>
  <q-card class="my-card bg-grey-2">
    <q-card-section class="bg-cyan text-white">
      <div class="text-h6">Add New Discount</div>
    </q-card-section>
    <q-separator vertical class="q-my-md"></q-separator>
    <div class="text-h6 q-pa-lg">Discount Information</div>

    <q-input class="q-px-sm q-mb-md" filled v-model="newDiscount.description" label="Discount Description" lazy-rules
      :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
    <q-separator vertical class="q-my-md"></q-separator>

    <q-input class="q-px-sm q-mb-md" filled v-model="newDiscount.discountPercentage" label="Discount Percentage"
      hint="Number only" lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
    <q-separator vertical class="q-my-md"></q-separator>

    <q-input class="q-px-sm q-mb-md" filled v-model="newDiscount.minSpend" label="Minimal Spend to Apply Discount"
      hint="Number only" lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
    <q-separator vertical class="q-my-md"></q-separator>

    <q-input class="q-px-sm q-mb-md" filled v-model="newDiscount.maxDiscountAmount" label="Maximum Discount Allowed"
      lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
    <q-separator vertical class="q-my-md"></q-separator>

    <q-input class="q-px-sm q-mb-md" filled v-model="newDiscount.start" mask="date" style="width: 300px;"
      label="Start date">
      <template v-slot:append>
        <q-icon name="event" class="cursor-pointer">
          <q-popup-proxy cover transition-show="scale" transition-hide="scale">
            <q-date v-model="newDiscount.start" landscape color="red">
              <div class="row items-center justify-end">
                <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
              </div>
            </q-date>
          </q-popup-proxy>
        </q-icon>
      </template>
    </q-input>

    <q-input class="q-px-sm q-mb-md" filled v-model="newDiscount.duration" label="Duration of The Discount"
      hint="Number only" lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
    <q-separator vertical class="q-my-md"></q-separator>

    <q-input class="q-px-sm q-mb-md" filled v-model="newDiscount.amount" label="The Quantity of The Discount"
      hint="Number only" lazy-rules :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>

    <!-- Shipping Method Dropdown -->
    <q-select class="q-px-sm q-mb-md" filled v-model="newDiscount.shippingMethodId"
      style="min-width: 300px; height: 10px margin: 10px; padding: 5px;" emit-value :options="shippingMethodOptions"
      options-cover map-options> </q-select>


    <q-separator vertical class="q-my-md"></q-separator>

    <q-card-actions align="left">
      <q-btn label="Submit" icon="arrow_downward" type="submit" color="primary" class="text-h7 q-mx-sm q-my-lg"
        size="lg" @@click="confirm = true"></q-btn>
      <q-dialog v-model="confirm" persistent>
        <q-card>
          <q-card-section class="row items-center">
            <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
            <span class="q-ml-sm">Add this discount?</span>
          </q-card-section>

          <q-card-actions align="center">
            <q-btn class="q-ma-sm" color="grey-9" @@click="addDiscount" label="Yes" v-close-popup></q-btn>
            <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
          </q-card-actions>
        </q-card>
      </q-dialog>
      <q-btn icon="arrow_back" label="Back" color="grey-7" class="text-h7 text-white" size="lg"
        onclick='window.location="/discount"'></q-btn>
      <q-dialog v-model="completedDialog">
        <q-card class="bg-indigo-1">
          <q-card-section>

            <div class="text-h6">
              Done!
              <q-icon name="done">
              </q-icon>

            </div>
          </q-card-section>

          <q-card-section class="q-pt-none">
            New discount Information had been added
          </q-card-section>
          <q-card-actions align="right">
            <q-btn flat label="Check" color="indigo" v-close-popup onclick='window.location="/discount"'></q-btn>
            <q-btn flat label="Close" icon="close" color="grey" v-close-popup></q-btn>
          </q-card-actions>
        </q-card>
      </q-dialog>
    </q-card-actions>
  </q-card>

  <div class="bg-grey-9 q-pa-sm" style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"></div>
</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          confirm: false,
          newDiscount: {
            description: "",
            discountPercentage: 0,
            minSpend: 0,
            maxDiscountAmount: 0,
            start: "2024/11/11",
            duration: 0,
            amount: 0,
            shippingMethodId: 0
          },
          completedDialog: false,
          shippingMethodOptions: [] // Array to store shipping method names

        };
      }
      ,
      //methods
      methods: {


        async addDiscount() {
          try {

            console.log("Discount Object:", this.newDiscount);
            // Make the API call
            var response = await axios.post(`/myapi/AddDiscount?shippingMethodId=${this.newDiscount.shippingMethodId}`, this.newDiscount);
            console.log("Reponse Object:", response);

            // Handle the response or perform any necessary logic
            if (response.status === 200) {
              // Additional logic after successful discount addition
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'Discount added successfully!'
              });

              // Clear form fields and reset data after successful addition
              this.onReset();

              // Show the completed dialog
              this.completedDialog = true;
            } else {
              // Log detailed error information
              console.error(response);

              // Handle the case where the API call was not successful
              this.$q.notify({
                color: 'red-4',
                textColor: 'white',
                icon: 'error',
                message: 'Error adding discount. Please check the console for details.'
              });
            }
          } catch (error) {
            // Log detailed error information
            console.error(error);

            // Hide loading indicator in case of an error
            this.$q.loading.hide();

            this.$q.notify({
              color: 'red-4',
              textColor: 'white',
              icon: 'error',
              message: 'Error adding discount. Please check the console for details.'
            });
          }
        }

        ,
        onReset() {
          // Show an ongoing notification
          const notif = this.$q.notify({
            type: 'ongoing',
            message: 'Resetting...'
          });

          // Simulate delay for 715 milliseconds
          setTimeout(() => {
            notif({
              type: 'positive',
              message: 'Reset complete',
              timeout: 315
            });

            // Reset the form fields and data

            this.newDiscount = {
              description: "",
              discountPercentage: null,
              minSpend: null,
              maxDiscountAmount: null,
              start: "",
              duration: null,
              amount: null,
              shippingMethod: {
                methodName: ""
              }

            };

            // Clear the input field for image URL
          }, 715);

          this.selectedShippingMethod = ""

        }



      }//emethod
      ,
      //computed
      computed: {

      }
      ,
      //created
      async created() {


        try {
          var res = await axios.get("/myapi/GetShippingMethods");
          this.shippingMethodOptions = res.data.map(method => ({
            label: method.methodName,
            value: method.shippingMethodId
          }));
          console.log(this.shippingMethodOptions);
        }
        catch (ex) {
          console.error('Error fetching shipping method names:', ex);
        }


      },
      //mounted
      mounted() {

      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>
}