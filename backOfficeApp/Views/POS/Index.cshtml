<div id="app1">
  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
    Order Item</div>
  <q-form class=" q-pa-lg" style="background-color: #f2f2f2;">
    <q-table class="bg-grey-2" title="Order Cart" :rows="orderItems" :columns="columns">
      <template v-slot:body="props">
        <q-tr :props="props">
          <q-td key="actions" :props="props">
            <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
              size="15px"></q-btn>
            <q-dialog v-model="confirm" persistent>
              <q-card>
                <q-card-section class="row items-center">
                  <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                  <span class="q-ml-sm">Are you sure you want to cencel this order?</span>
                </q-card-section>

                <q-card-actions align="center">
                  <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct(props.row)" label="Yes"
                    v-close-popup></q-btn>
                  <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
                </q-card-actions>
              </q-card>
            </q-dialog>
          </q-td>
          <q-td key="index" :props="props">{{ orderItems.indexOf(props.row) + 1 }}</q-td>
          <q-td key="orderDate" :props="props">
            {{ formatDate(props.row.orderDate) }}
            <q-icon name="event" />
          </q-td>

          <q-td key="statusDate" :props="props">
            {{ formatDate(props.row.statusDate) }}
            <q-icon name="event" />
          </q-td>
          <q-td key="statusName" :props="props">
  <q-select filled bottom-slots v-model="props.row.orderStatus.statusName" :options="statusDrop" label="Order Status"
    color="grey-10" style="width: 240px" option-value="statusDrop.statusName" option-label="statusName">
    <template v-slot:after>
      <q-btn :icon="getButtonIcon(props.row.orderStatus.statusName)" :color="getButtonColor(props.row.orderStatus.statusName)" @@click="showConfirmationDialog(props.row)" />

      <!-- Confirmation Dialog -->
      <q-dialog v-model="confirmDialog">
        <q-card>
          <q-card-section>
            <p>Are you sure you want to change the status?</p>
          </q-card-section>

          <q-card-actions align="center">
            <div style="margin-right: 8px;">
              <q-btn label="Cancel" color="grey" @@click="confirmDialog = false" />
            </div>
            <div>
              <q-btn label="Confirm" color="primary" @@click="confirmChange(props.row)" />
            </div>
          </q-card-actions>
        </q-card>
      </q-dialog>
    </template>
  </q-select>
</q-td>





          <q-td key="minSpend" :props="props">
            {{ props.row.discount.minSpend }}
          </q-td>
          <q-td key="start" :props="props">
            {{ formatDate(props.row.discount.start) }}
          </q-td>
          <q-td key="duration" :props="props">
            {{ props.row.discount.duration }}
          </q-td>
          <q-td key="amount" :props="props">
            {{ props.row.discount.amount }}
          </q-td>
          <q-td key="description" :props="props">
            {{ props.row.discount.description }}
          </q-td>
          <q-td key="picString" :props="props">
            {{ props.row.deliveryReceiptPics[0].picString }}
          </q-td>
          <q-td key="province" :props="props">
            {{ props.row.storeBranch.province }}
          </q-td>
          <q-td key="fullName" :props="props">
            {{ props.row.customer.firstName + ' ' + props.row.customer.lastName }}
          </q-td>
          <q-td key="email" :props="props">
            {{ props.row.customer.email }}
          </q-td>
          <q-td key="branchName" :props="props">
            {{ props.row.deliveryBranch.branchName }}
          </q-td>
          <q-td key="deliveryCompanyName" :props="props">
            {{ props.row.deliveryBranch.deliveryService.deliveryCompanyName }}
          </q-td>
          <q-td key="methodName" :props="props">
            {{ props.row.shippingMethod.methodName }}
          </q-td>
          <q-td key="name" :props="props">
            {{ props.row.billItems[0].product.name }}
          </q-td>
          <q-td key="collectionName" :props="props">
            {{ props.row.billItems[0].product.productCollection.collectionName }}
          </q-td>
          <q-td key="colorway" :props="props">
            {{ props.row.billItems[0].product.colorway }}
          </q-td>
          <q-td key="sizeType" :props="props">
            {{ props.row.billItems[0].shoeSize.sizeType }}
          </q-td>
          <q-td key="sizeNumber" :props="props">
            {{ props.row.billItems[0].shoeSize.sizeNumber }}
          </q-td>
          <q-td key="qty" :props="props">
            {{ props.row.billItems[0].qty }}
          </q-td>
          <q-td key="conditionName" :props="props">
            {{ props.row.billItems[0].productCondition.conditionName }}
          </q-td>

          <q-td key="qty" :props="props">
            {{ props.row.qty }}
            <q-popup-edit v-model.number="props.row.qty" buttons v-slot="scope">
              <q-input type="number" v-model.number="scope.value" dense autofocus @@keyup.enter="scope.set" />
            </q-popup-edit>
          </q-td>


        </q-tr>
      </template>
    </q-table>
    <div class="bg-grey-9 q-pa-sm" style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"></div>
    <q-card-actions align="right">
      <q-btn label="Submit" size="lg" icon="arrow_downward" color="primary" class="text-h7 q-mx-sm q-my-lg"
        @@click="confirm2 = true"></q-btn>

    </q-card-actions>
  </q-form>
</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          confirmDialog: false,
          confirm: false,
          confirm2: false,
          confirm3: false,
          statusDrop: [],
          selectedStatusDrop: [],
          orderItems: []
          ,
          columns: [
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },
            {
              name: 'index',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'orderDate',
              label: 'Order Date',
              field: 'orderDate',
              sortable: true,
              align: 'center',

            },
            {
              name: 'statusDate',
              label: 'Status Date',
              field: 'statusDate',
              sortable: true,
              align: 'center',

            },
            {
              name: 'statusName',
              label: 'Status',
              field: 'orderStatus.statusName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'minSpend',
              label: 'Minimum spend',
              field: 'discount.minSpend',
              sortable: true,
              align: 'center',

            },
            {
              name: 'start',
              label: 'Start',
              field: 'discount.start',
              sortable: true,
              align: 'center',

            },
            {
              name: 'duration',
              label: 'Duration',
              field: 'discount.duration',
              sortable: true,
              align: 'center',

            },
            {
              name: 'amount',
              label: 'Amount',
              field: 'discount.amount',
              sortable: true,
              align: 'center',

            },
            {
              name: 'description',
              label: 'Description',
              field: 'discount.description',
              sortable: true,
              align: 'center',

            },
            {
              name: 'picString',
              label: 'Picture',
              field: 'deliveryReceiptPics[0].picString',
              sortable: true,
              align: 'center',

            },
            {
              name: 'province',
              label: 'Province',
              field: 'storeBranch.province',
              sortable: true,
              align: 'center',

            },
            {
              name: 'fullName',
              label: 'Customer',
              sortable: true,
              align: 'center',
              formatter: (value, row) => {
                return row.customer.firstName + ' ' + row.customer.lastName;
              }
            }
            ,
            {
              name: 'email',
              label: 'Email',
              field: 'customer.email',
              sortable: true,
              align: 'center',

            },
            {
              name: 'branchName',
              label: 'Branch Name',
              field: 'deliveryBranch.branchName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'deliveryCompanyName',
              label: 'Delivery Company Name',
              field: 'deliveryBranch.deliveryService.deliveryCompanyName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'methodName',
              label: 'Shipping Method',
              field: 'shippingMethod.methodName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'name',
              label: 'Product',
              field: 'billItems[0].product.name',
              sortable: true,
              align: 'center',

            },
            {
              name: 'collectionName',
              label: 'Collection',
              field: 'billItems[0].productCollection.collectionName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'colorway',
              label: 'Colorway',
              field: 'billItems[0].product.colorway',
              sortable: true,
              align: 'center',

            },
            {
              name: 'sizeType',
              label: 'Size Type',
              field: 'billItems[0].shoeSize.sizeType',
              sortable: true,
              align: 'center',

            },
            {
              name: 'sizeNumber',
              label: 'Size Number',
              field: 'billItems[0].shoeSize.sizeNumber',
              sortable: true,
              align: 'center',

            },
            {
              name: 'qty',
              label: 'Quantity Ordered',
              field: 'billItems[0].qty',
              sortable: true,
              align: 'center',

            },
            {
              name: 'conditionName',
              label: 'Product Condition',
              field: 'billItems[0].productCondition.conditionName',
              sortable: true,
              align: 'center',

            },

          ],
          completedDialog: false
        };
      }
      ,
      //methods
      methods: {
        formatDate(dateString) {
          // Parse the date string
          const date = new Date(dateString);

          // Format the date as needed (e.g., "MM/DD/YYYY")
          const formattedDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;

          return formattedDate;
        },
        getButtonIcon(statusName) {
    // Define your logic to determine the icon based on the status name
    // For example:
    switch (statusName) {
      case 'Pending':
        return 'hourglass_empty';
      case 'Processing':
        return 'autorenew';
      case 'Shipped':
        return 'local_shipping';
      case 'Delivered':
        return 'check_circle';
      case 'Returned':
        return 'undo';
      case 'Refunded':
        return 'monetization_on';
      case 'Canceled':
        return 'cancel';
      case 'Completed':
        return 'done_all';
      default:
        return 'edit'; // Default icon if status is not recognized
    }
  },
  getButtonColor(statusName) {
    // Define your logic to determine the color based on the status name
    // For example:
    switch (statusName) {
      case 'Pending':
        return 'orange'; // Set color to orange for pending status
      case 'Processing':
        return 'blue'; // Set color to blue for processing status
      case 'Shipped':
        return 'green'; // Set color to green for shipped status
      case 'Delivered':
        return 'teal'; // Set color to teal for delivered status
      case 'Returned':
        return 'red'; // Set color to red for returned status
      case 'Refunded':
        return 'purple'; // Set color to purple for refunded status
      case 'Canceled':
        return 'grey'; // Set color to grey for canceled status
      case 'Completed':
        return 'green'; // Set color to green for completed status
      default:
        return 'primary'; // Set default color if status is not recognized
    }
  },
        showConfirmationDialog(row) {
    // Show the confirmation dialog
    this.confirmDialog = true;
  },
        async confirmChange(row) {
  try {
    const data = {
      billId: row.BillId,
      orderStatusId: row.orderStatusId // Assuming `orderStatusId` represents the ID of the selected status
    };
    const response = await axios.post("api/ChangeOrderStatus", data);
    // Handle response...
  } catch (error) {
    // Handle error...
  }
}



      }//emethod
      ,
      //computed
      computed: {


      }
      ,
      //created
      async created() {
        try {
          var response = await axios.get("/api/GetOrders");
          this.orderItems = response.data;
          console.log(response.data);
        }
        catch (error) {
          console.log(error);
        }
        try {
          var res = await axios.get("/api/GetStatus");
          this.statusDrop = res.data;
        }
        catch (error) {
          console.log(error);
        }


      }//ecreated
      ,
      //mounted
      mounted() {

      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>
}