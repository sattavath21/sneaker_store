<div id="app1">
  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
    Order Item</div>
  <q-form class=" q-pa-lg" style="background-color: #f2f2f2;">
    <q-card-actions align="left" class="bg-grey-2 rounded-bottom"> <!-- Aligns content to the end (right side) -->
      <div style="display: flex; flex-direction: column; width: 450px;">
        <q-select v-model="selectedOrderStatus" :options="orderStatus" label="Select Order Type"></q-select>
        <q-separator vertical class="q-my-sm"></q-separator>

      </div>
    </q-card-actions>
    <q-input ref="input1" v-model="item.barcode" label="Input Barcode" @@change="item_change">
    </q-input>
    <div class="q-ma-sm">
      <q-input v-model="item.barcode2" label="Scanned Barcode" readonly></q-input>

    </div>
</div>
<q-separator vertical class="q-my-xl"></q-separator>
<q-table class="bg-grey-2" title="Order Cart" :rows="orderItems" :columns="columns">
  <template v-slot:body="props">
    <q-tr :props="props">
      <q-td key="actions" :props="props">
        <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
          size="15px"></q-btn>
        <q-dialog v-model="confirm" persistent>
          <q-card>
            <q-card-section class="row items-center">
              <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
              <span class="q-ml-sm">Are you sure you want to cencel this order?</span>
            </q-card-section>

            <q-card-actions align="center">
              <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct(props.row)" label="Yes" v-close-popup></q-btn>
              <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
            </q-card-actions>
          </q-card>
        </q-dialog>
      </q-td>
      <q-td key="index" :props="props">{{ orderItems.indexOf(props.row) + 1 }}</q-td>
      <q-td key="qty" :props="props">
        {{ props.row.qty }}

        <q-popup-edit v-model="props.row.qty" buttons v-slot="scope">
          <q-input v-model="scope.value" dense autofocus counter type="number" @@keyup.enter="scope.set" />
        </q-popup-edit>
      </q-td>


      <q-td key="productImageUrl" :props="props">
        <q-img :src="props.row.productImageUrl" style="cursor: pointer;" @@click="toggleImageDialog(props.row)" />
        <q-dialog v-model="props.row.showImageDialog" persistent auto-close>
          <div style="text-align: center;">
            <img :src="props.row.productImageUrl" style="max-width: 100%; max-height: 100%;" />
          </div>
        </q-dialog>
      </q-td>
      <q-td key="productName" :props="props">
        {{ props.row.productName }}
      </q-td>

      <q-td key="sellingPrice" :props="props">
        {{ props.row.sellingPrice }}
      </q-td>
      <q-td key="shoeSize" :props="props">
        <q-select v-model="props.row.selectedShoeSize" :options="formattedShoeSizes(props.row.shoeSizes)"
          label="Select Size" dense outlined emit-value map-options>
        </q-select>

      </q-td>


      <q-td key="conditionName" :props="props">
        <q-select v-model="props.row.selectedCondition" :options="conditionOptions" dense outlined emit-value
          map-options />
      </q-td>

      <q-td key="colorway" :props="props">
        {{ props.row.colorway }}
      </q-td>
    </q-tr>
  </template>
</q-table>
<div class="bg-grey-9 q-pa-sm"></div>
<q-card-actions align="right" class="bg-grey-2 rounded-bottom"> <!-- Aligns content to the end (right side) -->
  <div style="display: flex; flex-direction: column; padding: 10px; width: 450px;">
    <q-select v-model="selectedDiscount" :options="discounts" label="Select Discount"></q-select>
    <q-separator vertical class="q-my-sm"></q-separator>
    <q-select v-model="selectedStaff" :options="staffOptions" label="Select Staff"></q-select>
    <q-separator vertical class="q-my-sm"></q-separator>
    <q-select v-model="selectedCustomer" :options="customerOptions" label="Select Customer"></q-select>
    <q-separator vertical class="q-my-sm"></q-separator>
    <q-select v-model="selectedShippingMethod" :options="shippingMethods" label="Select Shipping Method"></q-select>
    <q-separator vertical class="q-my-sm"></q-separator>
    <q-select v-model="selectedDeliveryService" :options="deliveryServices" label="Select Delivery Service"></q-select>
    <q-separator vertical class="q-my-sm"></q-separator>
    <q-select v-model="selectedBranch" :options="branches" label="Select Branch"></q-select>
    <q-separator vertical class="q-my-sm"></q-separator>
    <q-input v-model="customerTransferPic" label="Customer Transfer Pic"></q-input>
    <q-separator vertical class="q-my-sm"></q-separator>
  </div>
</q-card-actions>
<q-card-actions align="right">
  <q-btn label="Submit" size="lg" icon="arrow_downward" color="primary" class="text-h7 q-mx-sm q-my-lg"
    style="width: 240px; height: 80px;" @@click="confirm2 = true"></q-btn>
  <q-dialog v-model="confirm2" persistent transition-show="scale" transition-hide="scale">
    <q-card class="bg-teal-8 text-white" style="width: 800px; max-width: 100vw;">
      <q-card-section>
        <q-icon name="receipt_long" color="white" size="60px"></q-icon>
      </q-card-section>
      <q-card-section align="left" class="bg-teal-6">
        <h6 class="text-bold q-ma-md">Customer name : {{ selectedCustomer.customerFirstname }} {{
          selectedCustomer.customerLastname }}</h6>
      </q-card-section>

      <q-card-section align="right" class="bg-teal-4 q-pt-none q-pa-sm">
        <h6 v-for="item in orderItems">{{item.productName}} : {{item.qty}} x {{item.sellingPrice}} THB =
          {{item.qty*item.sellingPrice}} ฿</h6>
        <q-separator horizontal class="q-my-sm"></q-separator>
        <h6>Subtotal : {{sumSubTotal}} ฿</h6>
        <h6>Discount : {{ selectedDiscount ? selectedDiscount.label : 'None' }}</h6>

        <h6>Total : {{sumTotal}} ฿</h6>
      </q-card-section>

      <q-card-actions align="right" class="bg-white text-teal">
        <q-btn class="q-mb-lg q-mt-lg q-mr-sm" size="lg" icon="arrow_downward" color="teal" @@click="confirm3 = true"
          label="checkOut" v-close-popup></q-btn>
        <q-btn class="q-mb-lg q-mt-lg q-mr-md" size="lg" icon="close" label="Cancel" color="grey" v-close-popup></q-btn>
      </q-card-actions>
    </q-card>
  </q-dialog>
  <q-dialog v-model="confirm3" persistent>
    <q-card style="width: 520px; max-width: 30vw;">
      <q-card-section align="center" class="bg-teal-6" class="row items-center">
        <div align="left" class="q-pa-sm">
          <q-icon align="center" name="verified" color="white" size="60px"></q-icon>
        </div>

        <h4 class="text-bold text-h4 text-teal-12">Proceed?</h4>
      </q-card-section>

      <q-card-actions align="center">
        <q-btn class="q-mt-lg q-mb-lg q-pa-xl q-ma-md" icon="done" size="lg" color="teal" @@click="checkOut" label="Yes"
          v-close-popup></q-btn>
        <q-btn class="q-mt-lg  q-mb-lg q-pa-xl q-ma-md" size="lg" icon="cancel" label="No" color="grey" v-close-popup />
      </q-card-actions>
    </q-card>
  </q-dialog>
</q-card-actions>
</q-form>
</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          customerTransferPic: "",

          selectedOrderStatus: null,
          selectedDiscount: null,
          selectedShippingMethod: null,
          selectedDeliveryService: null,
          selectedBranch: null,
          selectedStaff: null,
          selectedCustomer: null,
          discounts: [],
          orderStatus: [],
          shippingMethods: [],
          deliveryServices: [],
          branches: [],
          staffOptions: [],
          customerOptions: [],
          conditionOptions: [], // Initialize conditionOptions array
          showImageDialog: false, // Add showImageDialog variable
          item: {
            barcode: '',
            barcode2: ''
          },
          confirm: false,
          confirm2: false,
          confirm3: false,
          orderItems: []
          ,
          columns: [
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },
            {
              name: 'index',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'qty',
              label: 'QTY',
              field: 'qty',
              sortable: true,
              align: 'center',
            },
            {
              name: 'productImageUrl',
              label: 'Product Image',
              field: 'productImageUrl',
              sortable: true,
              align: 'center',

            },
            {
              name: 'productName',
              label: 'Product Name',
              field: 'productName',
              sortable: true,
              align: 'center',

            },
            {
              name: 'sellingPrice',
              label: 'Selling Price',
              field: 'sellingPrice',
              sortable: true,
              align: 'center',

            },
            {
              name: 'shoeSize',
              label: 'Shoe Size',
              sortable: true,
              align: 'center',
              field: 'selectedShoeSize',
              format: (value) => `${value.sizeNumber} - ${value.sizeType} - QTY: ${value.inventoryQty}`,
            }



            ,
            {
              name: 'conditionName', // Name of the column
              label: 'Condition', // Label for the column
              field: 'selectedCondition', // Field to bind data to
              align: 'center',
              sortable: true,
            }
            ,
            {
              name: 'colorway',
              label: 'Colorway',
              field: 'colorway',
              sortable: true,
              align: 'center',

            },

          ],
        };
      }
      ,
      //methods
      methods: {
        formattedShoeSizes(shoeSizes) {
          return shoeSizes.map(size => ({
            label: `${size.sizeNumber} - ${size.sizeType} - QTY: ${size.inventoryQty}`,
            value: { productWithSizeId: size.productWithSizeId, shoeSizeId: size.shoeSizeId }
          }));
        }

        ,
        async checkOut() {


          if (this.orderItems.length === 0) {
            this.$q.notify({
              type: 'negative',
              color: "yellow-8",
              message: 'No items in the cart'
            });
            return;
          }

          // Restructure order items
          var reBillItems = this.orderItems.map(item => {
            // Access shoeSizeId and productWithSizeId through selectedShoeSize
            const shoeSizeId = item.selectedShoeSize ? item.selectedShoeSize.shoeSizeId : null;
            const productWithSizeId = item.selectedShoeSize ? item.selectedShoeSize.productWithSizeId : null;

            // Return the restructured item object
            return {
              shoeSizeId: shoeSizeId,
              productConditionId: item.selectedCondition,
              itemQty: item.qty,
              product: {
                productId: item.productId,
                productWithSizes: [{
                  productWithSizeId: productWithSizeId // Include productWithSizeId here
                }]
              }
            };
          });





          console.log("shippingMethodId:", this.selectedShippingMethod.value);
          console.log("customerTransferPicPath:", this.customerTransferPic);
          console.log("discountId:", this.selectedDiscount.value);
          console.log("deliveryServiceId:", this.selectedDeliveryService.value);
          console.log("branchId:", this.selectedBranch.value);
          console.log("staffId:", this.selectedStaff.value);
          console.log("customerId:", this.selectedCustomer.value);

          console.log("reBillItems:", reBillItems);
          // Create sale object
          var bill = {
            orderDate: new Date(),
            orderStatusId: this.selectedOrderStatus.value,
            shippingMethodId: this.selectedShippingMethod.value,
            customerTransferPicPath: this.customerTransferPic,
            discountId: this.selectedDiscount.value,
            deliveryServiceId: this.selectedDeliveryService.value,
            branchId: this.selectedBranch.value,
            staffId: this.selectedStaff.value,
            customerId: this.selectedCustomer.value,
            billItems: reBillItems
          };
          console.log("Bill:", bill);
          var url = "/api/AddSale";
          try {
            var res = await axios.post(url, bill);
            this.orderItems = [];
            this.selectedDiscount = null;
            this.selectedShippingMethod = null;
            this.selectedDeliveryService = null;
            this.selectedBranch = null;
            this.selectedStaff = null;
            this.selectedCustomer = null;
            this.$q.notify({
              color: 'green-4',
              textColor: 'white',
              icon: 'cloud_done',
              message: 'Order completed'
            });
            console.log(res.data);
          } catch (error) {
            console.log(error);
          }
        }
        ,
        // Function to fetch staff data
        async fetchStaffData() {
          try {
            const response = await axios.get("/api/GetStaffSelection");
            // Mapping the response data to objects with 'label' and 'value' properties
            this.staffOptions = response.data.map(staff => ({ label: `${staff.staffFirstname} ${staff.staffLastname}`, value: staff.staffId }));
            console.log("Staff Options:", this.staffOptions);
          } catch (error) {
            console.error("Error fetching staff data:", error);
          }
        },
        async fetchCustomerData() {
          try {
            const response = await axios.get("/api/GetCustomersSelection");
            // Mapping the response data to objects with 'label' and 'value' properties
            this.customerOptions = response.data.map(customer => ({ label: `${customer.customerFirstname} ${customer.customerLastname}`, value: customer.customerId }));
            console.log("Customer Options:", this.customerOptions);
          } catch (error) {
            console.error("Error fetching customer data:", error);
          }
        },
        async fetchDiscounts() {
          try {
            const response = await axios.get("/api/GetDiscountSelection");
            // Map the response data to create options with meaningful labels
            this.discounts = response.data.map(discount => ({
              label: `${discount.discountPercentage}% Discount - ${discount.description}`,
              value: discount.discountId
            }));
            console.log("Discounts:", this.discounts); // Add this line to log the discounts
          } catch (error) {
            console.error("Error fetching discounts:", error);
          }
        },



        async fetchShippingMethods() {
          try {
            const response = await axios.get("/api/GetShippingMethodsSelection");
            // Map the data to the format required by q-select
            this.shippingMethods = response.data.map(method => ({ label: method.methodName, value: method.shippingMethodId }));
            console.log("Shipping Methods:", this.shippingMethods);
          } catch (error) {
            console.error("Error fetching shipping methods:", error);
          }
        },
        async fetchDeliveryServices() {
          try {
            const response = await axios.get("/api/GetDeliveryServicesSelection");
            // Map the data to the format required by q-select
            this.deliveryServices = response.data.map(service => ({ label: service.deliveryCompanyName, value: service.deliveryServiceId }));
            console.log("Delivery Services:", this.deliveryServices);
          } catch (error) {
            console.error("Error fetching delivery services:", error);
          }
        },
        async fetchBranches() {
          try {
            const response = await axios.get("/api/GetBranchesSelection");
            // Map the data to the format required by q-select
            this.branches = response.data.map(branch => ({ label: branch.branchName, value: branch.branchId }));
            console.log("Branches:", this.branches);
          } catch (error) {
            console.error("Error fetching branches:", error);
          }
        },
        async fetchOrderStatus() {
  try {
    const response = await axios.get("/api/GetOrderStatusesSelection");
    // Map the data to the format required by q-select
    this.orderStatus = response.data.map(status => ({ 
      label: this.mapStatusLabel(status.statusName), // Map the label here
      value: status.orderStatusId 
    }));
    console.log("Order status:", this.orderStatus);
    // Set selectedOrderStatus to the label "Pre-order"
    this.selectedOrderStatus = this.orderStatus.find(status => status.label === 'Pre-order');
  } catch (error) {
    console.error("Error fetching orderStatus:", error);
  }
},



        async fetchProductConditions() {
          try {
            const response = await axios.get("/api/GetProductConditionSelection");
            // Assuming response.data contains the array of ProductCondition objects
            this.conditionOptions = response.data.map(condition => ({
              label: condition.conditionName,
              value: condition.productConditionId
            }));
            console.log("Product Conditions:", this.conditionOptions); // Log the product conditions
          } catch (error) {
            console.error("Error fetching product conditions:", error);
          }
        },

        toggleImageDialog(product) {
          product.showImageDialog = !product.showImageDialog;
        },
        async item_change() {
          this.item.barcode2 = this.item.barcode;

          try {
            var url = '/api/GetProductByBarcode?barcode=' + this.item.barcode;
            var res = await axios.get(url);

            if (res.data.result !== undefined) {
              console.log('%c Entire Result Object:', 'color: blue; font-weight: bold;', res.data.result);


              if (res.data.status != -1) {
                var index = this.orderItems.findIndex(item => item.productId === res.data.result.productId);

                if (index !== -1) {
                  // If the product is already in orderItems, create a new row with the same product details
                  var newProduct = { ...res.data.result }; // Create a new object to avoid modifying the original
                  newProduct.qty = 1; // Set initial quantity
                  newProduct.shoeSizes = res.data.result.productWithSizes.map(pws => ({
                    shoeSizeId: pws.shoeSize.shoeSizeId,
                    productWithSizeId: pws.productWithSizeId, // Include ProductWithSizeId
                    inventoryQty: pws.inventoryQty, // Include inventoryQty
                    sizeNumber: pws.shoeSize.sizeNumber,
                    sizeType: pws.shoeSize.sizeType
                  })); // Populate shoe sizes

                  console.log('New Product Shoe Sizes:', newProduct.shoeSizes); // Log the shoeSizes array

                  this.orderItems.push(newProduct);
                } else {
                  // Add new product to orderItems array
                  res.data.result.qty = 1; // Set initial quantity
                  res.data.result.shoeSizes = res.data.result.productWithSizes.map(pws => ({
                    shoeSizeId: pws.shoeSize.shoeSizeId,
                    productWithSizeId: pws.productWithSizeId, // Include ProductWithSizeId
                    inventoryQty: pws.inventoryQty, // Include inventoryQty
                    sizeNumber: pws.shoeSize.sizeNumber,
                    sizeType: pws.shoeSize.sizeType
                  })); // Populate shoe sizes

                  console.log('New Product Shoe Sizes:', res.data.result.shoeSizes); // Log the shoeSizes array

                  this.orderItems.push(res.data.result);
                }

                this.item.barcode = '';
                this.$refs.input1.$el.focus();
              } else {
                this.$q.notify({
                  type: 'warning',
                  message: 'Product not found'
                });
              }
            } else {
              // Handle case when the result is undefined (product not found)
              this.$q.notify({
                type: 'warning',
                message: 'Product not found'
              });
            }

          } catch (error) {
            console.log(error);
          }
        }
        ,
mapStatusLabel(statusName) {
    switch(statusName) {
      case 'Pending':
        return 'Pre-order';
      case 'Shipped':
        return 'Delivery';
      case 'Success':
        return 'In-store';
      default:
        return statusName;
    }
  }





      }//emethod
      ,
      //computed
      computed: {
        sumSubTotal() {
          let sumSubTotal = 0; // initialize sum variable to 0

          for (let i = 0; i < this.orderItems.length; i++) {
            sumSubTotal += this.orderItems[i].qty * this.orderItems[i].sellingPrice; // add current element to sum
          }
          console.log("orderItems", this.orderItems);
          return sumSubTotal;
        },
        sumTotal() {
          let sumTotal = 0; // initialize sum variable to 0

          for (let i = 0; i < this.orderItems.length; i++) {
            sumTotal += this.orderItems[i].qty * this.orderItems[i].sellingPrice; // add current element to sum
          }

          console.log("Selected Discount:", this.selectedDiscount);

          if (this.selectedDiscount && this.selectedDiscount.value != null) {
            // Parse the discount percentage from the label
            const labelParts = this.selectedDiscount.label.split(' ');
            const discountPercentage = parseInt(labelParts[0]); // Extract the percentage part and parse it as an integer
            sumTotal -= (sumTotal * discountPercentage / 100); // Apply discount
          }

          return sumTotal;
        },

      }
      ,
      //created
      created() {
        this.fetchOrderStatus();
        this.fetchDiscounts();
        this.fetchProductConditions();
        this.fetchStaffData();
        this.fetchCustomerData();
        this.fetchShippingMethods();
        this.fetchDeliveryServices();
        this.fetchBranches();
      }//ecreated
      ,
      //mounted
      mounted() {
        this.$refs.input1.$el.focus();
        //this.selectedDiscountDrop.discountPercentage = null;
      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>
}