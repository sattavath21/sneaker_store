<div id="app1">

  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
    Customer</div>


  <q-table class="bg-grey-2" title="Customer Information" :rows="customers" :columns="customerColumns"
    :filter="searchText" row-key="customerId">

    <template v-slot:top-left>
      <div class="text-h6 q-pa-md">Customer Information</div>
      <q-separator vertical class="q-my-sm"></q-separator>
      <div class="q-pl-sm">
        <q-input debounce="200" dense v-model="searchText" type="text">
          <template v-slot:prepend>
            <q-icon name="search"></q-icon>
          </template>
        </q-input>
      </div>
    </template>
    <template v-slot:body="props">
      <q-tr :props="props">
        <q-td key="actions" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
            size="15px"></q-btn>
          <q-dialog v-model="confirm" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="person_remove" color="orange" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this customer?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteCustomer(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>
        </q-td>

        <q-td key="index" :props="props">{{ customers.indexOf(props.row) + 1 }}</q-td>
        <q-td key="customerFirstname" :props="props">
          {{ props.row.customerFirstname }}
          <q-popup-edit v-model="props.row.customerFirstname">
            <q-input v-model="props.row.customerFirstname" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>


        <q-td key="customerLastname" :props="props">
          {{ props.row.customerLastname }}
          <q-popup-edit v-model="props.row.customerLastname">
            <q-input v-model="props.row.customerLastname" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="gender" :props="props">
          {{ props.row.gender }}
          <q-popup-edit v-model="props.row.gender">
            <q-input v-model="props.row.gender" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="age" :props="props">
          {{ calculateAge(props.row.customerBirthday) }}
        </q-td>

        <q-td key="customerBirthday" :props="props">
          <q-input filled v-model="props.row.customerBirthday" mask="date" style="width: 165px;">
            <template v-slot:append>
              <q-icon name="event" class="cursor-pointer">
                <q-popup-proxy cover transition-show="scale" transition-hide="scale">
                  <q-date v-model="props.row.customerBirthday" landscape color="red">
                    <div class="row items-center justify-end">
                      <q-btn v-close-popup label="Change" color="red" flat @@click="editCustomer(props.row)"></q-btn>
                      <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
                    </div>
                  </q-date>
                </q-popup-proxy>
              </q-icon>
            </template>
          </q-input>
        </q-td>


        <q-td key="email" :props="props">
          {{ props.row.email }}
          <q-popup-edit v-model="props.row.email">
            <q-input v-model="props.row.email" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="customerPhoneNumber" :props="props">
          {{ props.row.customerPhoneNumber }}
          <q-popup-edit v-model="props.row.customerPhoneNumber">
            <q-input v-model="props.row.customerPhoneNumber" filled dense autofocus mask="### #### ####"></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="customerSocialLink" :props="props">
          {{ props.row.customerSocialLink }}
          <q-popup-edit v-model="props.row.customerSocialLink">
            <q-input v-model="props.row.customerSocialLink" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>



      </q-tr>
    </template>
  </q-table>

  <div class="bg-grey-9 q-pa-sm" style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"></div>


  <q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 50px;" color="green" icon="add_box"
    label="Add new customer" size="md" onclick='window.location="/Stakeholder/AddCus"'></q-btn>

  @* Staff Section *@

  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */
            margin-top: 110px;">
    Staff</div>

  <q-table class="bg-grey-2" title="Staff Information" :rows="staffs" :columns="staffColumns" :filter="searchText"
    row-key="staffId">
    <template v-slot:top-left>
      <div class="text-h6 q-pa-md">Staff Information</div>
      <q-separator vertical class="q-my-sm"></q-separator>
      <div class="q-pl-sm">
        <q-input debounce="200" dense v-model="searchText" type="text">
          <template v-slot:prepend>
            <q-icon name="search"></q-icon>
          </template>
        </q-input>
      </div>
    </template>
    <template v-slot:body="props">
      <q-tr :props="props">
        <q-td key="staffActions" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="staffConfirm = true" icon="delete_forever"
            size="15px"></q-btn>
          <q-dialog v-model="staffConfirm" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this product?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>
        </q-td>
        <q-td key="staffIndex" :props="props">{{ staffs.indexOf(props.row) + 1 }}</q-td>
        <q-td key="staffFirstname" :props="props">
          {{ props.row.staffFirstname }}
          <q-popup-edit v-model="props.row.staffFirstname">
            <q-input v-model="props.row.staffFirstname" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="staffLastname" :props="props">
          {{ props.row.staffLastname }}
          <q-popup-edit v-model="props.row.staffLastname">
            <q-input v-model="props.row.staffLastname" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>


        <q-td key="staffBirthday" :props="props">
          <q-input filled v-model="props.row.staffBirthday" mask="date" style="width: 165px;">
            <template v-slot:append>
              <q-icon name="event" class="cursor-pointer">
                <q-popup-proxy cover transition-show="scale" transition-hide="scale">
                  <q-date v-model="props.row.staffBirthday" landscape color="red">
                    <div class="row items-center justify-end">
                      <q-btn v-close-popup label="Change" color="red" flat @@click="editStaff(props.row)"></q-btn>
                      <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
                    </div>
                  </q-date>
                </q-popup-proxy>
              </q-icon>
            </template>
          </q-input>
        </q-td>




        <q-td key="staffEmail" :props="props">
          {{ props.row.email }}
          <q-popup-edit v-model="props.row.email">
            <q-input v-model="props.row.email" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="staffPhoneNumber" :props="props">
          {{ props.row.staffPhoneNumber }}
          <q-popup-edit v-model="props.row.staffPhoneNumber">
            <q-input v-model="props.row.staffPhoneNumber" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="permissionName" :props="props">
          {{ props.row.permission.permissionName }}
        </q-td>

        <q-td key="permissionId" :props="props">
          <q-select class="q-px-sm" filled v-model="props.row.permissionId"
            style="min-width: 300px; height: 10px margin: 10px; padding: 5px;" emit-value :options="permissionOptions"
            options-cover map-options @@update:model-value="updatePermission(props.row)">
          </q-select>

        </q-td>


      </q-tr>
    </template>
  </q-table>
 <q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 50px;" color="green" icon="add_box"
    label="Add new staff" size="md" onclick='window.location="/stakeholder/addstaf"'></q-btn>


</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          confirm: false,
          searchText: "",
          customers: []
          ,
          customerColumns: [
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },
            {
              name: 'index',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'customerFirstname',
              label: 'First Name',
              field: 'customerFirstname',
              sortable: true,
              align: 'center',
            },
            {
              name: 'customerLastname',
              label: 'Last Name',
              field: 'customerLastname',
              sortable: true,
              align: 'center',
            },
            {
              name: 'gender',
              label: 'Gender',
              field: 'gender',
              sortable: true,
              align: 'center',
            },
            {
              name: 'age',
              label: 'Age',
              field: 'age',
              sortable: true,
              align: 'center',
            },
            {
              name: 'customerBirthday',
              label: 'Birthday',
              field: 'customerBirthday',
              sortable: true,
              align: 'center',
            },
            {
              name: 'email',
              label: 'Email',
              field: 'email',
              sortable: true,
              align: 'center',
            },

            {
              name: 'customerPhoneNumber',
              label: 'Phone Number',
              field: 'customerPhoneNumber',
              sortable: true,
              align: 'center',
            },


            {
              name: 'customerSocialLink',
              label: 'Social URL',
              field: 'customerSocialLink',
              sortable: true,
              align: 'center',
            },

          ],

          staffconfirm: false,
          searchText: "",
          staffs: []
          ,
          staffColumns: [
            {
              name: 'staffActions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },
            {
              name: 'staffIndex',
              field: 'index',
              align: 'left',
              sortable: true,
              label: 'No'
            },
            {
              name: 'staffFirstname',
              label: 'First Name',
              field: 'staffFirstname',
              required: true,
              sortable: true,
              align: 'center'
            },
            {
              name: 'staffLastname',
              label: 'Last Name',
              field: 'staffLastname',
              sortable: true,
              align: 'center'
            },
            {
              name: 'staffBirthday',
              label: 'Staff Birthday',
              field: 'staffBirthday',
              sortable: true,
              align: 'center'
            },
            {
              name: 'staffEmail',
              label: 'Email',
              field: 'email',
              sortable: true,
              align: 'center'
            },
            {
              name: 'staffPhoneNumber',
              label: 'Phone Number',
              field: 'staffPhoneNumber',
              sortable: true,
              align: 'center'
            },

            {
              name: 'permissionId',
              label: 'Permission',
              field: 'selectedPermission',
              align: 'center',
              sortable: true,
            },

          ],
          
          staffCompletedDialog: false,
          permissionOptions: []
        };
      }
      ,
      //methods
      methods: {

        async editCustomer(item) {
          var url = "myapi/EditCustomer";
          const inputDateString = item.customerBirthday;
          const inputDate = new Date(inputDateString);
          const year = inputDate.getFullYear();
          const month = String(inputDate.getMonth() + 1).padStart(2, '0');
          const day = String(inputDate.getDate()).padStart(2, '0');
          const formattedDateString = `${year}-${month}-${day}T00:00:00Z`;
          item.customerBirthday = formattedDateString;

          try {
            console.log(item);
            var response = await axios.post(url, item);
            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'Customer Modified!',
                timeout: 1000
              });
              console.log(response.data);
            }
          }
          catch (error) {
            console.log(error);
            this.$q.notify({
              color: 'red-4',
              textColor: 'white',
              icon: 'error',
              message: 'Reponse status not 200, please refresh.'
            });

          }
          console.log("Finished editCustomer function!");

        },//ef
        calculateAge(birthdate) {
          if (!birthdate) return ''; // Handle cases where birthdate is not provided

          const today = new Date();
          const dob = new Date(birthdate);

          let age = today.getFullYear() - dob.getFullYear();
          const monthDiff = today.getMonth() - dob.getMonth();

          if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
            age--;
          }

          return age;
        },

    @* Staff section *@
      async updatePermission(item){
      item.permission.permissionId = item.permissionId;
      if (item.permissionId == 1) {
        item.permission.permissionName = "Owner"
      } else if (item.permissionId == 2) {
        item.permission.permissionName = "Vice-owner"
      } else {
        item.permission.permissionName = "Staff"
      }
      this.editStaff(item);
    },
  
                  async editStaff(item) {
      var url = "/myapi/EditStaff";
      // Format Staff Birthdate
      const inputDateString = item.staffBirthday;
      const inputDate = new Date(inputDateString);
      const year = inputDate.getFullYear();
      const month = String(inputDate.getMonth() + 1).padStart(2, '0');
      const day = String(inputDate.getDate()).padStart(2, '0');
      const formattedDateString = `${year}-${month}-${day}T00:00:00Z`;
      item.staffBirthday = formattedDateString;

      try {
        console.log(item);
        var response = await axios.post(url, item);
        console.log(response.data);
        if (response.status >= 200 && response.status < 300) {
          console.log("Request successful");
          this.$q.notify({
            color: 'green-4',
            textColor: 'white',
            icon: 'cloud_done',
            message: 'Staff Modified!',
            timeout: 1000
          });
        }
      }
      catch (error) {
        console.log(error);
        this.$q.notify({
          color: 'red-4',
          textColor: 'white',
          icon: 'error',
          message: 'Reponse status not 200, please refresh.'
        });
      }
      console.log("Finished editStaff function!");

    },//ef

                  async deleteStaff(item) {
      var url = "/myapi/DeleteStaff";
      var del = item
      var response = await axios.post(url, del);
      console.log(this.staffs);
      this.staffs = this.staffs.filter(x => x.staffId != item.staffId);
      this.$q.notify({
        type: 'negative',
        color: "red-8",
        message: 'Staff had been deleted'
      })
    }//ef
                  ,
    onResetStaff() {
      const notif = this.$q.notify({
        type: 'ongoing',
        message: 'Loading...'
      })

      // simulate delay
      setTimeout(() => {
        notif({
          type: 'positive',
          message: 'Reseted',
          timeout: 315
        })
      }, 715)
      this.newStaff.staffFirstName = ""
      this.newStaff.staffLastName = ""
      this.newStaff.staffPhoneNumber = ""
      this.newStaff.staffBirthday = ""
      this.newStaff.email = ""
      this.newStaff.permission.permissionName = ""
    },

        }//emethod
        ,
    //computed
    computed: {

    }
        ,
        //created
        async created() {
      try {
        var response = await axios.get("/myapi/GetCustomers");
        this.customers = response.data;
        if (response.status >= 200 && response.status < 300) {
          console.log("Request successful");

        }
        console.log(response.data);
      }
      catch (error) {
        console.log(error);
        this.$q.notify({
          color: 'red-4',
          textColor: 'white',
          icon: 'error',
          message: 'Reponse status not 200, please refresh.'
        });
      }

      try {
        var response = await axios.get("/myapi/GetStaffs");
        this.staffs = response.data;
        console.log(response.data);
      }
      catch (error) {
        console.log(error);
      }

      try {
        var res = await axios.get("/myapi/GetPermissions");
        this.permissionOptions = res.data.map(permission => ({
          label: permission.permissionName,
          value: permission.permissionId
        }));
        console.log(this.permissionOptions);
      }
      catch (ex) {
        console.error('Error fetching permission Options:', ex);
      }


    }//ecreated
        ,
    //mounted
    mounted() {

    }

      };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>
}