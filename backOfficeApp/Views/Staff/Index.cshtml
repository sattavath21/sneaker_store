<div id="app1">
    <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
        Staff Information</div>

    <q-table class="bg-grey-2" title="Personal Information" :rows="staffs" :columns="columns" :filter="searchText">
        <template v-slot:top-left>
            <div class="text-h6 q-pa-md">Personal Information</div>
            <q-separator vertical class="q-my-sm"></q-separator>
            <div class="q-pl-sm">
                <q-input debounce="200" dense v-model="searchText" type="text">
                    <template v-slot:prepend>
                        <q-icon name="search"></q-icon>
                    </template>
                </q-input>
            </div>
        </template>
        <template v-slot:body="props">
            <q-tr :props="props">
                <q-td key="actions" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
            size="15px"></q-btn>
          <q-dialog v-model="confirm" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this product?</span>
              </q-card-section>

              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct(props.row)" label="Yes"
                  v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>
        </q-td>
                <q-td key="index" :props="props">{{ staffs.indexOf(props.row) + 1 }}</q-td>
                <q-td key="staffFirstname" :props="props">
                    {{ props.row.staffFirstname }}
                    <q-popup-edit v-model="props.row.staffFirstname">
                        <q-input v-model="props.row.staffFirstname" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="staffLastname" :props="props">
                    {{ props.row.staffLastname }}
                    <q-popup-edit v-model="props.row.staffLastname">
                        <q-input v-model="props.row.staffLastname" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="staffBirthday" :props="props">
                    {{ props.row.staffBirthday }}
                </q-td>

                <q-td key="email" :props="props">
                    {{ props.row.email }}
                    <q-popup-edit v-model="props.row.email">
                        <q-input v-model="props.row.email" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>

                <q-td key="staffPhoneNumber" :props="props">
                    {{ props.row.staffPhoneNumber }}
                    <q-popup-edit v-model="props.row.staffPhoneNumber">
                        <q-input v-model="props.row.staffPhoneNumber" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editStaff(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>

                <q-td key="permissionName" :props="props">
                    {{ props.row.permission.permissionName }}
                </q-td>

                
            </q-tr>
        </template>
    </q-table>


    <div class="bg-brown-10 q-pa-sm"></div>


    <q-card class="my-card bg-grey-2">
        <q-card-section class="bg-cyan text-white">
            <div class="text-h6">Add New Staff</div>
        </q-card-section>
        <div class="text-h6 q-pa-lg">General Information</div>
        <q-input class="q-px-sm q-mb-sm" filled v-model="staff.staffFirstName" label="First Name" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>

        <q-input class="q-px-sm q-mb-sm" filled v-model="staff.staffLastName" label="Last Name" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>

        <q-input class="q-px-sm" filled v-model="staff.staffBirthday" mask="date" style="width: 300px;">
            <template v-slot:append>
                <q-icon name="event" class="cursor-pointer">
                    <q-popup-proxy cover transition-show="scale" transition-hide="scale">
                        <q-date v-model="staff.staffBirthday" landscape color="red">
                            <div class="row items-center justify-end">
                                <q-btn v-close-popup label="Close" color="grey" flat></q-btn>
                            </div>
                        </q-date>
                    </q-popup-proxy>
                </q-icon>
            </template>
        </q-input>
<q-separator vertical class="q-my-md"></q-separator>
        <q-input class="q-px-sm q-mb-sm" filled v-model="staff.email" label="Email" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        
        <q-input class="q-px-sm q-mb-sm" filled v-model="staff.staffPhoneNumber" label="Phone Number" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>

        <q-input class="q-px-sm q-mb-sm" filled v-model="staff.permission.permissionName" label="Permission" lazy-rules
            :rules="[ val => val && val.length > 0 || 'Please type something']"></q-input>
        <q-separator vertical class="q-my-md"></q-separator>
        <div class="justify-end row">
            <q-btn icon="restart_alt" class="q-mx-lg" color="grey" @@click="onReset" size="lg"></q-btn>
        </div>
        <q-card-actions align="left">
            <q-btn icon="arrow_downward" label="Submit" type="submit" color="primary" class="text-h7 q-ma-lg"
                @@click="confirm2 = true" size="lg"></q-btn>
            <q-dialog v-model="confirm2" persistent>
                <q-card>
                    <q-card-section class="row items-center">
                        <q-avatar icon="engineering" color="brown-10" text-color="white"></q-avatar>
                        <span class="q-ml-sm">Add this staff?</span>
                    </q-card-section>

                    <q-card-actions align="center">
                        <q-btn class="q-ma-sm" color="brown-10" @@click="addStaff" label="Yes" v-close-popup></q-btn>
                        <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
                    </q-card-actions>
                </q-card>
            </q-dialog>
            <q-dialog v-model="completedDialog">
                <q-card class="bg-indigo-1">
                    <q-card-section>

                        <div class="text-h6">
                            Done!
                            <q-icon name="done">
                            </q-icon>

                        </div>
                    </q-card-section>

                    <q-card-section class="q-pt-none">
                        Staff Information had been added
                    </q-card-section>

                    <q-card-actions align="right">
                        <q-btn flat label="Ok" color="indigo" v-close-popup></q-btn>
                    </q-card-actions>
                </q-card>
            </q-dialog>
        </q-card-actions>
    </q-card>

</div>

@section code {
    <script>
        var option = {
            //data
            data() {
                return {
                    confirm2: false,
                    confirm: false,
                    searchText: "",
                    staffs: []
                    ,
                    columns: [
                        {
                            name: 'actions',
                            label: 'Actions',
                            field: 'actions',
                            align: 'center'
                        },
                        {
                            name: 'index',
                            field: 'index',
                            align: 'left',
                            sortable: true,
                            label: 'No'
                        },
                        {
                            name: 'staffFirstname',
                            label: 'First Name',
                            field: 'staffFirstname',
                            required: true,
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'staffLastname',
                            label: 'Last Name',
                            field: 'staffLastname',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'staffBirthday',
                            label: 'Staff Birthday',
                            field: 'staffBirthday',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'email',
                            label: 'Email',
                            field: 'email',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'staffPhoneNumber',
                            label: 'Phone Number',
                            field: 'staffPhoneNumber',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'permissionName',
                            label: 'Permission',
                            field: 'permission.permissionName',
                            sortable: true,
                            align: 'center'
                        }

                    ],
                    staff: {
                        staffFirstName: "andy",
                        staffLastName: "asdasdo",
                        staffBirthday: "19/01/2001",
                        email: "huangguifu21@gmail.com",
                        staffPhoneNumber: "24374373",
                        permission: {
                            permissionName: "Admin"
                        }
                    },
                    completedDialog: false
                };
            }
            ,
            //methods
            methods: {
                async addStaff() {
                    try {
                        var response = await axios.post("/api/AddStaff", this.staff);
                        this.completedDialog = true;
                        console.log(response.data);
                        this.staffs.push(response.data);
                        console.log(this.staffs);
                    }
                    catch (error) {
                        console.log(error);
                    }

                }//ef
                ,
                async editStaff(item) {

                    var url = "api/EditStaff";
                    try {
                        console.log(item);
                        var result = await axios.post(url, item);
                        console.log(result.data);
                    }
                    catch (error) {
                        console.log(error);
                    }

                }//ef
                ,
                async deleteStaff(item) {
                    var url = "/api/DeleteStaff";
                    var del = item
                    var result = await axios.post(url, del);
                    console.log(this.staffs);
                    this.staffs = this.staffs.filter(x => x.staffId != item.staffId);
                    this.$q.notify({
                        type: 'negative',
                        color: "red-8",
                        message: 'Staff had been deleted'
                    })
                }//ef
                ,
                onReset() {
                    const notif = this.$q.notify({
                        type: 'ongoing',
                        message: 'Loading...'
                    })

                    // simulate delay
                    setTimeout(() => {
                        notif({
                            type: 'positive',
                            message: 'Reseted',
                            timeout: 315
                        })
                    }, 715)
                    this.staff.staffFirstName = ""
                    this.staff.staffLastName = ""
                    this.staff.staffPhoneNumber = ""
                    this.staff.staffBirthday = ""
                    this.staff.email = ""
                    this.staff.permission.permissionName = ""
                }

            }//emethod
            ,
            //computed
            computed: {

            }
            ,
            //created
            async created() {
                try {
                    var response = await axios.get("/api/GetStaff");
                    this.staffs = response.data;
                    console.log(response.data);
                }
                catch (error) {
                    console.log(error);
                }


            }//ecreated
            ,
            //mounted
            mounted() {

            }

        };

        const app = Vue.createApp(option);
        app.use(Quasar)
        app.mount('#app1')
    </script>
}