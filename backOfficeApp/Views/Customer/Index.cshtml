<div id="app1">

    <div class="text-h5 text-weight-bold text-white q-pa-lg"
     style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
            Customer Information</div>


    <q-table class="bg-grey-2" title="Personal Information" :rows="customers" :columns="columns" :filter="searchText">

        <template v-slot:top-left>
            <div class="text-h6 q-pa-md">Personal Information</div>
            <q-separator vertical class="q-my-sm"></q-separator>
            <div class="q-pl-sm">
                <q-input debounce="200" dense v-model="searchText" type="text">
                    <template v-slot:prepend>
                        <q-icon name="search"></q-icon>
                    </template>
                </q-input>
            </div>
        </template>
        <template v-slot:body="props">
            <q-tr :props="props">
                <q-td key="index" :props="props">{{ customers.indexOf(props.row) + 1 }}</q-td>
                <q-td key="firstName" :props="props">
                    {{ props.row.firstName }}
                    <q-popup-edit v-model="props.row.firstName">
                        <q-input v-model="props.row.firstName" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="lastName" :props="props">
                    {{ props.row.lastName }}
                    <q-popup-edit v-model="props.row.lastName">
                        <q-input v-model="props.row.lastName" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="dateOfBirth" :props="props">{{ new Date(props.row.dateOfBirth).toLocaleDateString() }}</q-td>
                <q-td key="phone" :props="props">
                    {{ props.row.phone }}
                    <q-popup-edit v-model="props.row.phone">
                        <q-input v-model="props.row.phone" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="email" :props="props">
                    {{ props.row.email }}
                    <q-popup-edit v-model="props.row.email">
                        <q-input v-model="props.row.email" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomer(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>

                <q-td key="actions" :props="props">
                    <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true"
                        icon="backspace"></q-btn>

                </q-td>
            </q-tr>
        </template>
        <q-dialog v-model="confirm" persistent>
            <q-card>
                <q-card-section class="row items-center">
                    <q-avatar icon="person_remove" color="orange" text-color="white"></q-avatar>
                    <span class="q-ml-sm">Are you sure you want to delete this customer?</span>
                </q-card-section>

                <q-card-actions align="center">
                    <q-btn class="q-ma-sm" color="red-6" @@click="deleteCustomer(props.row)" label="Yes"
                        v-close-popup></q-btn>
                    <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
                </q-card-actions>
            </q-card>
        </q-dialog>
    </q-table>

    <div class="bg-orange-10 q-pa-sm"></div>



    <q-table class="bg-grey-2" title="Address Information" :rows="customersAddress" :columns="columnsAddress"
        :filter="searchText2">
        <template v-slot:top-left>
            <div class="text-h6 q-pa-md">Address Information</div>
            <q-separator vertical class="q-my-sm"></q-separator>
            <div class="q-pl-sm">
                <q-input debounce="200" dense v-model="searchText2" type="text">
                    <template v-slot:prepend>
                        <q-icon name="search"></q-icon>
                    </template>
                </q-input>
            </div>
        </template>
        <template v-slot:body="props">
            <q-tr :props="props">
                <q-td key="index" :props="props">{{ customersAddress.indexOf(props.row) + 1 }}</q-td>
                <q-td key="no" :props="props">
                    {{ props.row.no }}
                    <q-popup-edit v-model="props.row.no">
                        <q-input v-model="props.row.no" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomerAddress(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="street" :props="props">
                    {{ props.row.street }}
                    <q-popup-edit v-model="props.row.street">
                        <q-input v-model="props.row.street" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomerAddress(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="city" :props="props">
                    {{ props.row.city }}
                    <q-popup-edit v-model="props.row.city">
                        <q-input v-model="props.row.city" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomerAddress(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="zip" :props="props">
                    {{ props.row.zip }}
                    <q-popup-edit v-model="props.row.zip">
                        <q-input v-model="props.row.zip" dense autofocus counter></q-input>
                        <div class="justify-end row">
                            <q-btn color="blue-grey-6" @@click="editCustomerAddress(props.row)" icon="edit" label="edit"
                                v-close-popup="cancelEnabled">
                            </q-btn>
                        </div>
                    </q-popup-edit>
                </q-td>
                <q-td key="actions" :props="props">
                    <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true"
                        icon="backspace"></q-btn>
                    <q-dialog v-model="confirm" persistent>
                        <q-card>
                            <q-card-section class="row items-center">
                                <q-avatar icon="person_remove" color="orange-10" text-color="white"></q-avatar>
                                <span class="q-ml-sm">Are you sure you want to delete this customer?</span>
                            </q-card-section>

                            <q-card-actions align="center">
                                <q-btn class="q-ma-sm" color="red-6" @@click="deleteCustomerAddress(props.row)"
                                    label="Yes" v-close-popup></q-btn>
                                <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
                            </q-card-actions>
                        </q-card>
                    </q-dialog>
                </q-td>
            </q-tr>
        </template>
    </q-table>
    <q-btn class="q-my-lg" color="primary" icon="add_box" label="Add Customer" size="lg"
        onclick='window.location="/Customer/AddCus"'></q-btn>

</div>

@section code{
    <script>
        var option = {
            //data
            data() {
                return {
                    confirm: false,
                    searchText: "",
                    searchText2: "",
                    customers: []
                    ,
                    customersAddress: []
                    ,
                    columns: [
                        {
                            name: 'index',
                            field: 'index',
                            align: 'left',
                            sortable: true,
                            label: 'No'
                        },
                        {
                            name: 'firstName',
                            label: 'First Name',
                            field: 'firstName',
                            required: true,
                            sortable: true,
                            align: 'center'

                        },
                        {
                            name: 'lastName',
                            label: 'Last Name',
                            field: 'lastName',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'dateOfBirth',
                            label: 'Date of Birth',
                            field: 'dateOfBirth',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'phone',
                            label: 'Phone',
                            field: 'phone',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'email',
                            label: 'Email',
                            field: 'email',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'actions',
                            label: 'Actions',
                            field: 'actions',
                            align: 'center'
                        }
                    ],
                    columnsAddress: [
                        {
                            name: 'index',
                            field: 'index',
                            align: 'left',
                            sortable: true,
                            label: 'No'
                        },
                        {
                            name: 'no',
                            label: 'No',
                            field: 'no',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'street',
                            label: 'Street',
                            field: 'street',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'city',
                            label: 'City',
                            field: 'city',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'zip',
                            label: 'Zip',
                            field: 'zip',
                            sortable: true,
                            align: 'center'
                        },
                        {
                            name: 'actions',
                            label: 'Actions',
                            field: 'actions',
                            align: 'center'
                        }
                    ]
                };
            }
            ,
            //methods
            methods: {
                async editCustomer(item) {

                    var url = "api/EditCustomer";
                    try {
                        console.log(item);
                        var result = await axios.post(url, item);
                        console.log(result.data);
                    }
                    catch (error) {
                        console.log(error);
                    }

                }//ef
                ,
                async editCustomerAddress(item) {

                    var url = "api/EditCustomerAddress";
                    try {
                        console.log(item);
                        var result = await axios.post(url, item);
                        console.log(result.data);
                    }
                    catch (error) {
                        console.log(error);
                    }

                }//ef
                ,
                async deleteCustomer(item) {
                    console.log(item);
                    var url = "/api/DeleteCustomer";
                    var del = item
                    var result = await axios.post(url, del);
                    this.customers = this.customers.filter(x => x.customerId != item.customerId);
                    this.customersAddress = this.customersAddress.filter(x => x.customerAddressId != item.customerAddressId);
                    this.$q.notify({
                        type: 'negative',
                        color: "red-8",
                        message: 'Customer had been deleted'
                    })
                }//ef
                ,
                async deleteCustomerAddress(item) {
                    console.log(item);
                    var url = "/api/DeleteCustomerAddress";
                    var del = item
                    var result = await axios.post(url, del);
                    this.customers = this.customers.filter(x => x.customerAddressId != item.customerAddressId);
                    this.customersAddress = this.customersAddress.filter(x => x.customerAddressId != item.customerAddressId);
                    this.$q.notify({
                        type: 'negative',
                        color: "red-8",
                        message: 'Customer had been deleted'
                    })
                }//ef



            }//emethod
            ,
            //computed
            computed: {

            }
            ,
            //created
            async created() {
                try {
                    var response = await axios.get("/api/GetCustomers");
                    this.customers = response.data;
                    console.log(response.data);
                }
                catch (error) {
                    console.log(error);
                }
                try {
                    var response = await axios.get("/api/GetCusAddress");
                    this.customersAddress = response.data;
                    console.log(response.data);
                }
                catch (error) {
                    console.log(error);
                }


            }//ecreated
            ,
            //mounted
            mounted() {

            }

        };

        const app = Vue.createApp(option);
        app.use(Quasar)
        app.mount('#app1')
    </script>
}