@{
    ViewData["Title"] = "ປະຫວັດການຂາຍ";
}

<div id="app1">
  

  <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */;
            ">
    
    ໜ້າປະຫວັດການຂາຍ
  </div>
  <q-table 
  title="Bills History" 
  class="my-sticky-column-table"
  :rows="bills" 
  :columns="billColumns" 
  row-key="billId">
    <template v-slot:top-left>
      <div class="text-h6 q-pa-md"> Bills History <q-btn icon="restart_alt" round class="q-mx-lg" size="md" color="grey"
     
          @@click="onReset"></q-btn>
      </div>
      <q-separator vertical class="q-my-sm"></q-separator>
      <div class="q-pl-sm">
        <q-input debounce="200" dense v-model="searchText" type="text" @@change="filterBills">
          <template v-slot:prepend>
            <q-icon name="search"></q-icon>
          </template>
        </q-input>
        <q-separator vertical class="q-my-sm"></q-separator>
        <q-select v-model="orderStatusSelected" :options="orderStatusSelection" label="Filter by Order Status" outlined
          emit-value map-options @@update:model-value="filterBills">

        </q-select>


      </div>
    </template>

    <template #body="props">
      <q-tr :props="props">
        <q-td key="orderDetails" :props="props">
          <q-btn color="black" flat dense round :icon="props.expand ? 'arrow_drop_down' : 'arrow_right'"
            @@click="props.expand = !props.expand">
          </q-btn>
        </q-td>

        <q-td key="billIndex" :props="props">{{ bills.indexOf(props.row) + 1 }}</q-td>

        <q-td key="customerName" :props="props">
          {{ props.row.customer.customerFirstname }} {{ props.row.customer.customerLastname }}

        </q-td>

        <q-td key="orderDate" :props="props">
            {{ formatDate(props.row.orderDate) }}
        </q-td>

        <q-td key="statusName" :props="props" style="min-width: 250px;">
          
  <div class="q-gutter-md row items-center">
    <div class="col">
      <q-select v-model="props.row.orderStatus.statusName" :options="orderStatusOptions" dense outlined
        @@update:model-value="handleSelectedOrderStatusOptions(props.row)">
      </q-select>
    </div>
    <div class="col-auto">
      <q-btn :disable="!props.row.isHandleSelected" @@click="editOrderStatus(props.row.orderStatus.statusName, props.row.billId, props.row)" color="primary"
        label="Update"></q-btn>

    </div>
  </div>

</q-td>

        <q-td key="methodName" :props="props">
          {{ props.row.shippingMethod.methodName }}
           <q-icon v-if="props.row.shippingMethod.methodName === 'Delivery'" name="local_shipping" size="24px" style="margin-left: 8px; color: #2196F3;" ></q-icon>
    <q-icon v-else-if="props.row.shippingMethod.methodName === 'In-store'" name="store" size="24px" style="margin-left: 8px; color: #795548;" ></q-icon>
        </q-td>

      <q-td key="total" :props="props">
          &#3647;{{ formatPrice(calculateTotal(props.row)) }}
        </q-td>

      <q-td key="depositMoney" :props="props">
          &#3647;{{ formatPrice(props.row.depositMoney) }}
          <q-popup-edit v-model="props.row.depositMoney">
            <q-input v-model="props.row.depositMoney" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editDepositMoney(props.row.depositMoney, props.row.billId)"
                icon="edit" label="Edit" v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>
       <q-td key="description" :props="props">
          {{ props.row.discount.description }}

        </q-td>

        <q-td key="discountPercentage" :props="props">
          {{ props.row.discount.discountPercentage }}

        </q-td>
      <q-td key="grandTotal" :props="props">
          &#3647;{{ formatPrice(calculateGrandTotal(props.row).grandTotal) }}
        </q-td>

        <q-td key="customerTransferPicPath" :props="props">
          {{ props.row.customerTransferPicPath }}
          <q-popup-edit v-model="props.row.customerTransferPicPath">
            <q-input v-model="props.row.customerTransferPicPath" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editTransferEvi(props.row.customerTransferPicPath, props.row.billId)"
                icon="edit" label="Edit" v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

        <q-td key="shippingReceipt" :props="props">
          {{ props.row.shippingReceipt }}
          <q-popup-edit v-model="props.row.shippingReceipt">
            <q-input v-model="props.row.shippingReceipt" dense autofocus counter></q-input>
            <div class="justify-end row">
              <q-btn color="blue-grey-6" @@click="editShippingReceipt(props.row.shippingReceipt, props.row.billId)"
                icon="edit" label="Edit" v-close-popup="cancelEnabled">
              </q-btn>
            </div>
          </q-popup-edit>
        </q-td>

 


        <q-td key="deliveryCompanyName" :props="props">
          {{ props.row.deliveryService.deliveryCompanyName }}
        </q-td>

        <q-td key="branchName" :props="props">
          {{ props.row.branch.branchName }}

        </q-td>

        <q-td key="staffName" :props="props">
          {{ props.row.staff.staffFirstname }} {{ props.row.staff.staffLastname }}

        </q-td>


        <q-td key="actions" :props="props">
          <q-btn class="q-ma-sm q-px-lg q-py-sm" size="15px" icon="print" color="primary"
            @@click="printContent(props.row)"></q-btn>


          <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="openDeleteBillDialog(props.row.billId)" icon="delete_forever"
            size="15px"></q-btn>


          <q-dialog v-model="deleteBillVisible" persistent>
            <q-card>
              <q-card-section class="row items-center">

                <q-avatar icon="list" color="grey-9" text-color="white"></q-avatar>
                <span class="q-ml-sm">Are you sure you want to delete this history?</span>
              </q-card-section>

              <q-card-actions align="center">
        
                <q-btn class="q-ma-sm" color="red-6" @@click="deleteBill" label="Yes" v-close-popup></q-btn>
                <q-btn class="q-ma-sm" label="No" @@click="closeDeleteBillDialog" color="grey" v-close-popup />
              </q-card-actions>
            </q-card>
          </q-dialog>

        </q-td>




      </q-tr>


      @* Expanded section *@
      <q-tr :props="props" v-show="props.expand">
        <q-td colspan="100%">

          <div class="custom-expandable-table-wrapper">
<q-table title="Order Details" :rows="props.row.billItems" :columns="orderDetailColumns" row-key="billItemId"
            separator="none" style="padding: 12px;">
            <template #body="props">

              <!-- NEW props -->
              <q-tr :props="props">

                <q-td key="barcode" :props="props">
                  {{ props.row.product.barcode }}
                </q-td>
                <q-td key="productName" :props="props">
                  {{ props.row.product.productName }}
                </q-td>

                <q-td key="shoeSizeNumber" :props="props">
                  {{ props.row.shoeSize.sizeNumber }}
                </q-td>

      
                <q-td key="itemQty" :props="props" class="fourth-column">
                  {{ props.row.itemQty }}
                </q-td>

                <q-td key="productCondition" :props="props">
     
  <q-chip
    :color="getChipColor(props.row.productCondition.conditionName)"
    :text-color="getTextColor(props.row.productCondition.conditionName)"

         
  >{{ props.row.productCondition.conditionName }}</q-chip>
</q-td>
                <q-td key="sellingPrice" :props="props">
            
                  &#3647;{{ formatPrice(props.row.product.sellingPrice) }}

                </q-td>
              <q-td key="subTotal" :props="props">
                  &#3647;{{ formatPrice(props.row.product.sellingPrice * props.row.itemQty)  }}

                </q-td>

              </q-tr>
            </template>

          </q-table>

          </div>
        
          @* Dialog when add branch *@
          <q-dialog v-model="branchDialogVisible" persistent>
            <q-card>
              <q-card-section class="row items-center">
                <span class="q-ml-sm">Enter branch name:</span>
              </q-card-section>
              <q-card-section>
                <q-input filled v-model="newBranch.branchName" label="Branch Name" lazy-rules
                  :rules="[ val => val && val.length > 0 || 'Please enter branch name']">
                </q-input>
              </q-card-section>
              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="primary" @@click="addBranch(props.row.deliveryServiceId)"
                  label="Add"></q-btn>
                <q-btn class="q-ma-sm" label="Cancel" color="grey" @@click="closeBranchDialog"></q-btn>
              </q-card-actions>
            </q-card>
          </q-dialog>
        </q-td>
      </q-tr>
    </template>
  </q-table>
</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          deleteBillVisible: false,
          billIdToDelete: 0,
          selectedRows: new Map(),
          selectedOrderStatusOptions: [],
          orderStatusOptions: [],
          orderStatusSelected: [],
          orderStatusSelection: [],
          searchText: "",
          originalBills: [],
          bills: [],
          billColumns: [
            {
              name: 'orderDetails',
              label: 'Order details',
              align: 'center',
              sortable: true,
              field: 'orderDetails'
            },
            {
              name: 'billIndex',
              field: 'billIndex',
              align: 'center',
              sortable: true,
              label: 'No'
            },
 
              name: 'customerName',
              label: 'Customer',

              align: 'left',
              sortable: true,
              field: row => `${row.customer.customerFirstname} ${row.customer.customerLastname}`
            },

            {
              name: 'orderDate',
              label: 'Ordered date',
              field: 'orderDate',

              align: 'left',
              sortable: true,
            },
            {
              name: 'statusName',
              label: 'Order status',
              field: 'orderStatus.statusName',
              align: 'center',
              sortable: true,
            },
            {
              name: 'methodName',
              label: 'Shipping method',
              field: 'shippingMethod.methodName',

              align: 'left',
              sortable: true,
            },
            {
   
              name: 'total',
              label: 'Total',
              field: 'total',
              align: 'right',
              sortable: true,
            },
            {

              name: 'depositMoney',
              label: 'Deposit Money',
              field: 'depositMoney',
              align: 'right',
              sortable: true,
            },
            {
              name: 'description',
              label: 'Discount name',
              field: 'discount.description',

              align: 'left',
              sortable: true,
            },
            {
              name: 'discountPercentage',

              label: 'Discount (%)',
              field: 'discount.discountPercentage',
              align: 'center',
              sortable: true,
            },
            {
              name: 'grandTotal',
              label: 'Grand total',
              field: 'grandTotal',
              align: 'right',
              sortable: true,
            },
            {
              name: 'customerTransferPicPath',
              label: 'Customer transfer evidence',
              field: 'customerTransferPicPath',
              align: 'center',
              sortable: true,
            },
            {
              name: 'shippingReceipt',
              label: 'Shipping Receipt',
              field: 'shippingReceipt',
              align: 'center',
              sortable: true,
            },
            {
              name: 'deliveryCompanyName',
              label: 'Delivery company name',
              field: 'deliveryService.deliveryCompanyName',

              align: 'left',
              sortable: true,
            },

            {
              name: 'branchName',
              label: 'Deliver branch',
              field: 'branch.branchName',

              align: 'left',
              sortable: true,
            },

            {
              name: 'staffName',
              label: 'Responsible staff',

              align: 'left',
              sortable: true,
              field: row => `${row.staff.staffFirstname} ${row.staff.staffLastname}`
            },
            {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },





          ],

          orderDetailColumns: [
            {
              name: 'barcode',
              label: 'Product barcode',
              field: 'product.barcode',

              align: 'left',
              sortable: true
            },
            {
              name: 'productName',
              label: 'Product name',
              field: 'product.productName',

              align: 'left',
              sortable: true
            },
            {
              name: 'shoeSizeNumber',
              label: 'Size',
              field: 'shoeSize.sizeNumber',
              align: 'center',
              sortable: true
            },
            {
              name: 'itemQty',
              label: 'Qty',
              field: 'itemQty',
              align: 'center',
              sortable: true
            },
            {
              name: 'productCondition',
              label: 'Condition',
              field: 'productCondition.conditionName',
              align: 'center',
              sortable: true
            },
            {
              name: 'sellingPrice',
              label: 'Price',
              field: 'product.sellingPrice',

              align: 'right',
              sortable: true
            },
            {
              name: 'subTotal',
              label: 'Subtotal',
              field: 'product.sellingPrice * itemQty',
              align: 'right',
              sortable: true
            }
          ]
        };
      }
      ,
      //methods
      methods: {
                openDeleteBillDialog(billId) {
          this.deleteBillVisible = true;
          this.billIdToDelete = billId;

        },
        closeDeleteBillDialog() {
          this.deleteBillVisible = false;
          this.billIdToDelete = 0;
        },
// Function to calculate subtotal
calculateTotal(item) {
  let total = 0;
  // Iterate through each bill item
  item.billItems.forEach(billItem => {
    // Calculate total price
    const subTotal = billItem.itemQty * billItem.product.sellingPrice;
    total += subTotal;
  });
  return total;
},

// Function to calculate grand total
calculateGrandTotal(item) {
  const total = this.calculateTotal(item);
  grandTotal = total - item.depositMoney;
  const discountBaht = grandTotal * (item.discount.discountPercentage / 100);
  grandTotal -= discountBaht;
    return {
    grandTotal: grandTotal,
    discountBaht: discountBaht
  };
},

        formatPrice(price) {
          // Convert the price to a string
          let formattedPrice = price.toString();

          // Use regex to add commas for every three digits
          formattedPrice = formattedPrice.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

          return formattedPrice;
        },
          getChipColor(conditionName) {
    if (conditionName === 'Pre-owned') {
      return 'orange-2';
    } else if (conditionName === 'Brand new') {
      return 'green-2';
    } else {
      return 'grey-2';
    }
  },
   getTextColor(conditionName) {
    if (conditionName === 'Pre-owned') {
      return 'orange'; // Darker shade of orange for text
    } else if (conditionName === 'Brand new') {
      return 'green'; // Darker shade of green for text
    } else {
      return ''; // Default text color
    }
  },
        handleSelectedOrderStatusOptions(row) {
    if (!row.isHandleSelected) {
      // Enable the button for this row
      row.isHandleSelected = true;
      // You may want to do additional processing here if needed
    }
  },
  filterBills() {
  let filteredBills = [...this.originalBills];

  if (this.searchText !== "") {
    const searchTerms = this.searchText.toLowerCase().split(" ");

    filteredBills = filteredBills.filter(x => {
      const fullName = `${x.customer.customerFirstname.toLowerCase()} ${x.customer.customerLastname.toLowerCase()}`;
      return searchTerms.every(term => fullName.includes(term));
    });
  }

  if (typeof this.orderStatusSelected === 'string' && this.orderStatusSelected !== "") {
    filteredBills = filteredBills.filter(x =>
      x.orderStatus.statusName.toLowerCase() === this.orderStatusSelected.toLowerCase()
    );
  }

  this.bills = filteredBills;
  console.log("Filtered Bills:", this.bills);

  if (this.searchText === "" && (typeof this.orderStatusSelected !== 'string' || this.orderStatusSelected === "")) {
    const notif = this.$q.notify({
      type: 'ongoing',
      message: 'Loading...'
    });

    // simulate delay
    setTimeout(() => {
      notif({
        type: 'positive',
        message: 'Reseted',
        timeout: 300
      });
    }, 600);
  }
}


,
        selectedOrderStatus(newValue) {
          if (newValue !== null) {
            this.bills = this.originalBills.filter(x => x.customer.customerFirstname.toLowerCase().includes(this.orderStatusSelected.toLowerCase()) ||
              x.customer.customerLastname.toLowerCase().includes(this.orderStatusSelected.toLowerCase()) ||
              x.orderStatus.statusName.toLowerCase().includes(this.orderStatusSelected.toLowerCase())

            )
            console.log(this.orderStatusSelected);
          }
          else {
            console.log(this.bills);
            this.bills = [...this.originalBills]
            const notif = this.$q.notify({
              type: 'ongoing',
              message: 'Loading...'
            })

            // simulate delay
            setTimeout(() => {
              notif({
                type: 'positive',
                message: 'Reseted',
                timeout: 300
              })
            }, 600)
          }
        },
        async fetchOrderStatus() {
          try {
            const response = await axios.get("/api/GetOrderStatusesSelection");
            // Map the data to the format required by q-select
            this.orderStatusSelection = response.data.map(status => ({ label: `${status.statusName}`, value: status.statusName }));
            this.orderStatusOptions = response.data.map(status => ({ label: `${status.statusName}`, value: status.orderStatusId }));
            console.log("Status:", this.orderStatusSelection);
          } catch (error) {
            console.error("Error fetching Status:", error);
          }
        },
        searchBill() {
          if (this.searchText !== "") {
            this.bills = this.originalBills.filter(x => x.customer.customerFirstname.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.customer.customerLastname.toLowerCase().includes(this.searchText.toLowerCase()) ||
              x.orderStatus.statusName.toLowerCase().includes(this.searchText.toLowerCase())

            )
            console.log(this.searchText);
          }
          else {
            console.log(this.bills);
            this.bills = [...this.originalBills]
            const notif = this.$q.notify({
              type: 'ongoing',
              message: 'Loading...'
            })

            // simulate delay
            setTimeout(() => {
              notif({
                type: 'positive',
                message: 'Reseted',
                timeout: 300
              })
            }, 600)
          }
        }
        ,

        async editTransferEvi(evidencePic, billId) {
          console.log("Start of ediTransEvi", evidencePic, billId);
          try {

            const response = await axios.post(`/myapi/EditCustomerTransfer?billId=${billId}&newTransfer=${evidencePic}`);

            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'History Modified!'
              });
            } else {
              console.error("Unexpected response status:", response.status);
            }
          } catch (error) {
            console.error("Error during request:", error);

            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }
        }
        ,

        async editShippingReceipt(shippingReceipt, billId) {

          try {

            const response = await axios.post(`/myapi/EditShippingReceipt?billId=${billId}&newTransfer=${shippingReceipt}`);

            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'History Modified!'
              });
            } else {
              console.error("Unexpected response status:", response.status);
            }
          } catch (error) {
            console.error("Error during request:", error);

            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }

        },
        async editOrderStatus(orderStatusId, billId, row) {
          const selectedStatusValue = orderStatusId.value;
          console.log('Status Id:', selectedStatusValue);
          console.log('Bill ID:', billId);
          try {

            const response = await axios.post(`/myapi/EditOrderStatus?billId=${billId}&newTransfer=${selectedStatusValue}`);

            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
              row.isHandleSelected = false;
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'History Modified!'
              });
            } else {
              console.error("Unexpected response status:", response.status);
            }
          } catch (error) {
            console.error("Error during request:", error);

            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }
        },

  async editDepositMoney(newDepositMoney, billId) {
          console.log("Start of ediTransEvi", newDepositMoney, billId);
          try {

            const response = await axios.post(`/myapi/EditDepositMoney?billId=${billId}&newDepositMoney=${newDepositMoney}`);

            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");

              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'History Modified!'
              });
              window.location.reload();
            } else {
              console.error("Unexpected response status:", response.status);
            }
          } catch (error) {
            console.error("Error during request:", error);

            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }

        }
        ,
        async deleteBill() {
          try {
            // Send the delete request

            const reponse = await axios.post(`/myapi/DeleteBill?billIdToDelete=${this.billIdToDelete}`);

            // Use the correct property name in the filter callback
   
            this.bills = this.bills.filter(x => x.billId !== this.billIdToDelete);
            if (reponse.status === 200) {
              // Additional logic after successful product addition
              this.$q.notify({
                color: 'green-4',
                textColor: 'white',
                icon: 'cloud_done',
                message: 'Bill deleted successfully'
              });
            // Set a flag in local storage indicating successful delete
            localStorage.setItem('deleteSuccess', 'true');
            // Refresh the page
            window.location.reload();
            }

          } catch (error) {

            console.error('Error deleting bill:', error);

            // Notify the user about the error
            this.$q.notify({
              type: 'negative',
              color: 'red-8',

              message: 'Error deleting bill'
            });
          }
        },
        calculateEndDate(start, duration) {
          const startDate = new Date(start); // Convert start date string to Date object
          const endDate = new Date(startDate); // Create a copy of the start date

          // Add the duration in days to the start date
          endDate.setDate(startDate.getDate() + duration);

          // Format the end date as needed (e.g., to a specific format)
          // Example format: YYYY-MM-DD
          const formattedEndDate = endDate.toISOString().slice(0, 10);

          return formattedEndDate;
        },

        async onReset() {
          const notif = this.$q.notify({
            type: 'ongoing',
            message: 'Resetting...'
          });

          try {
            // Reset the deliveryRow arrasy to an empty array
            this.bills = [];
            this.orderStatusSelected = [];
            // Call the API to get delivery services data again
            const billResponse = await axios.get("/myapi/GetBills");
            this.bills = billResponse.data;

            this.searchText = ""
            // Notify the user that the reset was successful
            notif({
              type: 'positive',
              message: 'Reset successful',
              timeout: 300
            });
          } catch (error) {
            // Notify the user if an error occurs during the reset process
            notif({
              type: 'negative',
              message: 'Failed to reset. Please try again.',
              timeout: 300
            });
            console.error('Error resetting bills data:', error);
          }
        },
  formatDate(dateString) {
    const date = new Date(dateString);
    const formattedDate = date.toLocaleDateString("en-GB", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit"
    });
    return formattedDate;
  },
        printContent(item) {
          const todayDate = new Date();

        const formattedTodayDate = `${todayDate.getDate().toString().padStart(2, '0')}/${(todayDate.getMonth() + 1).toString().padStart(2, '0')}/${todayDate.getFullYear()}`;

          // Function to format date to DD/MM/YYYY
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  };

    const formattedOrderDate = formatDate(item.orderDate);


          // Mock data list

          let dataList = [
          @*  *@
          ];



  // Iterate through each bill item
item.billItems.forEach(billItem => {
    // Calculate total price

    const subTotal = (billItem.itemQty * billItem.product.sellingPrice);
    // Push new data object to dataList array
    dataList.push({
        qty: billItem.itemQty, // Quantity from billItem.itemQty
        productName: billItem.product.productName, // Product name from billItem.product.productName
        size: billItem.shoeSize.sizeNumber, // Size from billItem.shoeSize.sizeNumber

        pricePerUnit: billItem.product.sellingPrice.toLocaleString(),
        price: subTotal.toLocaleString(), // Price from billItem.product.sellingPrice with commas
    });

});


  const total = this.calculateTotal(item);
console.log('Subtotal:', total);


const result = this.calculateGrandTotal(item);

const grandTotal = result.grandTotal;
console.log('Grand Total:', grandTotal);

  const discountBaht = result.discountBaht;

          const printWindow = window.open('', '_blank', 'width=600,height=600,chrome=0');

          printWindow.document.write(`

    <html>
    <head>
        <title>99ᵗʰ Century Sneaker Store</title>
        <style>
          /* Add CSS styles for printing if needed */
          body {
            font-family: Arial, sans-serif;
            text-align: center;
          }
          .bold-text {
        font-weight: bold;
          margin: 0;
      padding: 0;
        margin-top: 0; /* Add this line to remove the space on top */

      }
          @@page {
                        margin: 1in; /* Set paper margin */
                        size: A5; /* Set paper size */
                    }
          .header {
            font-size: 26px;
            margin-top: 25px;
            margin-bottom: 25px;
          }
          .content{
                white-space: nowrap; /* Prevents wrapping to a new line */
    margin-bottom: 25px;

          }
          .box34content{
            margin-top: 15px;
                          white-space: nowrap; /* Prevents wrapping to a new line */
              padding: 0 30px; /* Add padding of 20px to the left and right */

          }
                * {
      font-family: 'Noto Sans Lao', sans-serif; /* Change the font-family to Noto Sans */
      font-style: normal;
      font-weight: 400;
    }
          .box1{
             display: inline-block;
        width: 50%; /* Each box takes up 50% of the container width */
        vertical-align: top; /* Align box1 to the top */
            font-size: 18px;

          }
          .box2 {
        display: inline-block;
        width: 50%; /* Each box takes up 50% of the container width */
                  font-size: 18px;

    }
        .box3{
             display: inline-block;
        width: 50%; /* Each box takes up 50% of the container width */
        vertical-align: top; /* Align box1 to the top */
            font-size: 12px;
            margin-top: 30px;
              background-color: #f2f2f2; /* Grey background color */
                padding-bottom: 8px; /* Add padding at the bottom */
             border-radius: 10px; /* Rounded corners */
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Shadow effect without blur */

          }
  .box4 {
           display: inline-block;
        width: 50%; /* Each box takes up 50% of the container width */
        vertical-align: top; /* Align box1 to the top */
            font-size: 12px;
          padding-left: 15px; /* Adjust the value as needed */

  }

          /* Container for watermark */
          .watermark-container {
          position: absolute;
          top: 0; /* Adjust as needed */
          left: 0; /* Adjust as needed */
          width: 100%; /* Take up the full width of the container */
          height: 100%; /* Take up the full height of the container */
          z-index: 1; /* Ensure the watermark is above other content */
        }

          /* Watermark styling */
          .watermark {
        position: absolute;
        top: 40%; /* Center vertically */
        left: 50%; /* Center horizontally */
        transform: translate(-50%, -50%); /* Center the watermark */

        width: 45%; /* Reduce width to half */
        height: auto; /* Automatically adjust height */
        pointer-events: none; /* Ensure the watermark doesn't interfere with click events */
        opacity: 0.35; /* Adjust opacity as needed */
        z-index: -1; /* Place the watermark behind other content */
          }
           /* Table styles */
           .table-container {
    padding: 0 30px; /* Add padding of 20px to the left and right */
    margin: 0 auto; /* Center the table horizontally */
  }
       table {
    border-collapse: collapse;
    width: 100%; /* Ensure the table takes up the entire width of the container */
              font-size: 16px;

  }
        th {
          padding: 10px;
          border: none; /* Remove borders */
        }
        td {
          padding: 10px;
          border: none; /* Remove borders */
          text-align: center; /* Horizontal alignment */

        }
        .td-align-left {
    text-align: left;
  }


  .td-align-right {
    text-align: right;
  }
        /* Adjust column widths */
        th:nth-child(1), td:nth-child(1) {
          width: 5%; /* Small width for 1st column */
        }
        th:nth-child(2), td:nth-child(2) {

          width: 40%; /* Widest width for 2nd column */
        }
        th:nth-child(3), td:nth-child(3) {
          width: 15%; /* Moderate width for 3rd column */
        }
        th:nth-child(4), td:nth-child(4) {
          width: 15%; /* Wide width for 4th column */
        }
        th:nth-child(5), td:nth-child(5) {
          width: 25%; /* Wide width for 4th column */
        }
         tr:nth-child(odd) {
        background-color: #f2f2f2; /* Change the background color as needed */
      }
      .row {
    display: flex;
    justify-content: space-between;
    border-bottom: 1px solid #ddd; /* Optional: add borders between rows */
  }

  .cell {
    padding: 10px;
  }
        </style>
      </head>

    <body>
        <!-- Watermark container -->
        <div class="watermark-container">
      <!-- Watermark image -->

      <img class="watermark" src="/asset/image/99th_croped.png" alt="Watermark">
    </div>
            <!-- Header -->
            <div class="header">
  <p style="white-space: nowrap;">
    <span class="bold-text">ໃບຮັບຈອງສິນຄ້າ (Receipt)</span> ${formattedTodayDate}
  </p>          </div>

            <!-- Content -->
            <div class="content">

              <div class="box1">
                <p>ຮ້ານຄ້າຜູ້ບໍລິການ<br><div class="bold-text">99<sup>th</sup> Century</div></p>
              </div>
              <div class="box2">
                <p>ລາຍລະອຽດລູກຄ້າ<div class="bold-text">${item.customer.customerFirstname} ${item.customer.customerLastname}</div>ວັນທີ່ຈອງສິນຄ້າ ${formattedOrderDate}</p>
              </div>

            </div>

  <div class="table-container">
    <table id="data-table" style="border-collapse: collapse; border: none;">
    <tr style="background-color: #fff6c4;">
      <th style="padding: 10px; border-right: 0.35px solid grey; font-weight: bold;">ຈຳນວນ</th>
      <th style="padding: 10px; border-right: 0.35px solid grey; font-weight: bold;">ລາຍການສິນຄ້າ</th>
      <th style="padding: 10px; border-right: 0.35px solid grey; font-weight: bold;">ໄຊສ໌</th>

      <th style="padding: 10px; border-right: 0.35px solid grey; font-weight: bold;">ລາຄາ (ບາດ)</th>
      <th style="padding: 10px; font-weight: bold;">ເປັນເງິນ</th>
    </tr>


  </table>
  </div>
            <div class="box34content">
  <div class="box3">
                <p><span style="color: red;">ໝາຍເຫດ</span><br>ທາງຮ້ານເຮົານຳເຂົ້າສິນຄ້າອອກຊັອບໂດຍຕົງ<br>ເເລະມີຮັບປະກັນສິນຄ້າຂອງເເທ້ 100% <br>ຫາກພົບຂອງປອມທາງຮ້ານຮັບຜິດຊອບ<br>ຄວາມເສຍຫາຍຄືນເເກ່ລູກຄ້າ 2 ເທົ່າ</p>
              </div>
              <div class="box4">
    <div class="row">
      <div class="cell">ທັງໝົດ</div>

      <div class="cell" style="font-weight: bold;">${total.toLocaleString()}</div>
    </div>
    <div class="row">
      <div class="cell">ສ່ວນລົດ</div>
      <div class="cell" style="font-weight: bold;">${discountBaht.toLocaleString()}</div>
    </div>
    <div class="row">
      <div class="cell">ມັດຈຳ</div>

      <div class="cell" style="font-weight: bold;">${item.depositMoney.toLocaleString()}</div>
    </div>
    <div class="row">
      <div class="cell">ຄ່າຈັດສົ່ງ</div>
      <div class="cell" style="font-weight: bold;">FREE</div>
    </div>
    <div class="row" style="background-color: #f2f2f2;">
      <div class="cell" style="font-weight: bold;">ຍອດທີ່ເຫຼືອ</div>
      <div class="cell" style="font-weight: bold;">${grandTotal.toLocaleString()}</div>
    </div>
  </div>
              </div>


            </div>


               <div class="selected-value">
        </div>


    </body>
    </html
          `);


          printWindow.document.close();
          // After closing the document, select the table element
          const table = printWindow.document.getElementById('data-table');
          // Append rows to the table
          dataList.forEach(item => {
            const row = printWindow.document.createElement('tr');
            row.innerHTML = `
              <td style="padding: 10px; border-right: 0.35px solid grey; font-size:14px;">${item.qty}</td>
              <td class="td-align-left" style="padding: 10px; border-right: 0.35px solid grey; font-size:14px;">${item.productName}</td>
              <td style="padding: 10px; border-right: 0.35px solid grey; font-size:14px;">${item.size}</td>
              <td class="td-align-right" style="padding: 10px; border-right: 0.35px solid grey; font-size:14px;">${item.pricePerUnit}</td>
              <td class="td-align-right" style="padding: 10px; font-size:14px;">${item.price}</td>

          `;
            table.appendChild(row);
          });



          printWindow.print();
        }

      }
      ,
      //computed
      computed: {

      }
      ,
      //created
      async created() {
        this.fetchOrderStatus();

        try {
          var billResponse = await axios.get("/myapi/GetBills");
          this.bills = billResponse.data;
          this.originalBills = billResponse.data;
          console.log(billResponse.data);
        }
        catch (error) {
          console.log(error);
        }

      }//ecreated
      ,
      //mounted
      mounted() {

      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>

}