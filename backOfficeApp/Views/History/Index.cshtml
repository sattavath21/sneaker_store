<div id="app1">


<div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */;
            ">
    ໜ້າປະວັດການຂາຍ
</div>
    <q-table title="Bills History" class="bg-grey-2" :rows="bills" :columns="billColumns" :filter="searchText" row-key="billId" separator="none">
      <template v-slot:top-left>
      <div class="text-h6 q-pa-md"> Bills History <q-btn icon="restart_alt" round class="q-mx-lg" size="md"
          color="grey" @@click="onReset"></q-btn></div>
    </template>
    
      <template #body="props">
        <q-tr :props="props">
           <q-td key="orderDetails" :props="props">
          <q-btn color="black" flat dense round :icon="props.expand ? 'arrow_drop_down' : 'arrow_right'"
            @@click="props.expand = !props.expand">
          </q-btn>
        </q-td>

          <q-td key="billIndex" :props="props">{{ bills.indexOf(props.row) + 1 }}</q-td>

          <q-td key="billId" :props="props">{{ props.row.billId }}</q-td>

<q-td key="customerName" :props="props">
            {{ props.row.customer.customerFirstname }} {{ props.row.customer.customerLastname }}
            
          </q-td>

          <q-td key="orderDate" :props="props">
            {{ props.row.orderDate }}
            <q-popup-edit v-model="props.row.orderDate">
              <q-input v-model="props.row.orderDate" dense autofocus counter></q-input>
              <div class="justify-end row">
                <q-btn color="blue-grey-6" @@click="editBill(props.row)" icon="edit" label="Edit"
                  v-close-popup="cancelEnabled">
                </q-btn>
              </div>
            </q-popup-edit>
          </q-td>

          <q-td key="statusName" :props="props">
            {{ props.row.orderStatus.statusName }}
            <q-popup-edit v-model="props.row.orderStatus.statusName">
              <q-input v-model="props.row.orderStatus.statusName" dense autofocus counter></q-input>
              <div class="justify-end row">
                <q-btn color="blue-grey-6" @@click="editBill(props.row)" icon="edit" label="Edit"
                  v-close-popup="cancelEnabled">
                </q-btn>
              </div>
            </q-popup-edit>
          </q-td>

          <q-td key="methodName" :props="props">
            {{ props.row.shippingMethod.methodName }}
            <q-popup-edit v-model="props.row.shippingMethod.methodName">
              <q-input v-model="props.row.shippingMethod.methodName" dense autofocus counter></q-input>
              <div class="justify-end row">
                <q-btn color="blue-grey-6" @@click="editBill(props.row)" icon="edit" label="Edit"
                  v-close-popup="cancelEnabled">
                </q-btn>
              </div>
            </q-popup-edit>
          </q-td>

          <q-td key="customerTransferPicPath" :props="props">
            {{ props.row.customerTransferPicPath }}
            <q-popup-edit v-model="props.row.customerTransferPicPath">
              <q-input v-model="props.row.customerTransferPicPath" dense autofocus counter></q-input>
              <div class="justify-end row">
                <q-btn color="blue-grey-6" @@click="editBill(props.row)" icon="edit" label="Edit"
                  v-close-popup="cancelEnabled">
                </q-btn>
              </div>
            </q-popup-edit>
          </q-td>

          <q-td key="shippingReceipt" :props="props">
            {{ props.row.shippingReceipt }}
            <q-popup-edit v-model="props.row.shippingReceipt">
              <q-input v-model="props.row.shippingReceipt" dense autofocus counter></q-input>
              <div class="justify-end row">
                <q-btn color="blue-grey-6" @@click="editBill(props.row)" icon="edit" label="Edit"
                  v-close-popup="cancelEnabled">
                </q-btn>
              </div>
            </q-popup-edit>
          </q-td>

          <q-td key="description" :props="props">
            {{ props.row.discount.description }}
            
          </q-td>

          <q-td key="discountPercentage" :props="props">
            {{ props.row.discount.discountPercentage }}
            <q-popup-edit v-model="props.row.discount.discountPercentage">
              <q-input v-model="props.row.discount.discountPercentage" dense autofocus counter></q-input>
              <div class="justify-end row">
                <q-btn color="blue-grey-6" @@click="editBill(props.row)" icon="edit" label="Edit"
                  v-close-popup="cancelEnabled">
                </q-btn>
              </div>
            </q-popup-edit>
          </q-td>


          <q-td key="deliveryCompanyName" :props="props">
            {{ props.row.deliveryService.deliveryCompanyName }}
          </q-td>

          <q-td key="branchName" :props="props">
            {{ props.row.branch.branchName }}
            
          </q-td>

          <q-td key="staffName" :props="props">
            {{ props.row.staff.staffFirstname }} {{ props.row.staff.staffLastname }}
            
          </q-td>


        <q-td key="actions" :props="props">
            <q-btn class="q-ma-sm q-px-lg q-py-sm" size="15px" icon="print" color="primary" @@click="printContent" ></q-btn>

            <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="confirm = true" icon="delete_forever"
              size="15px"></q-btn>
            <q-dialog v-model="confirm" persistent>
              <q-card>
                <q-card-section class="row items-center">
                  <q-avatar icon="inventory_2" color="grey-9" text-color="white"></q-avatar>
                  <span class="q-ml-sm">Are you sure you want to delete this history?</span>
                </q-card-section>

                <q-card-actions align="center">
                  <q-btn class="q-ma-sm" color="red-6" @@click="deleteBill(props.row)" label="Yes"
                    v-close-popup></q-btn>
                  <q-btn class="q-ma-sm" label="No" color="grey" v-close-popup />
                </q-card-actions>
              </q-card>
            </q-dialog>

          </q-td>
   
          


        </q-tr>


        @* Expanded section *@
      <q-tr :props="props" v-show="props.expand">
        <q-td colspan="100%">
          <q-table title="Order Details" :rows="props.row.billItems" :columns="orderDetailColumns" row-key="billItemId"
            separator="none">
            <template #body="props">

              <!-- NEW props -->
              <q-tr :props="props">
               
                <q-td key="barcode" :props="props">
                  {{ props.row.product.barcode }}
                </q-td>
                <q-td key="productName" :props="props">
                  {{ props.row.product.productName }}
                </q-td>

                <q-td key="shoeSizeNumber" :props="props">
                  {{ props.row.shoeSize.sizeNumber }}
                </q-td>

                <q-td key="itemQty" :props="props">
                  {{ props.row.itemQty }}
                </q-td>

                 <q-td key="productCondition" :props="props">
                  {{ props.row.productCondition.conditionName }}
                
                </q-td>
                 <q-td key="sellingPrice" :props="props">
                  {{ props.row.product.sellingPrice }}
                
                </q-td>


              </q-tr>
            </template>

          </q-table>

        

          @* Dialog when add branch *@
          <q-dialog v-model="branchDialogVisible" persistent>
            <q-card>
              <q-card-section class="row items-center">

                <span class="q-ml-sm">Enter branch name:</span>
              </q-card-section>

              <q-card-section>
                <q-input filled v-model="newBranch.branchName" label="Branch Name" lazy-rules
                  :rules="[ val => val && val.length > 0 || 'Please enter branch name']">
                </q-input>
              </q-card-section>


              <q-card-actions align="center">
                <q-btn class="q-ma-sm" color="primary" @@click="addBranch(props.row.deliveryServiceId)"
                  label="Add"></q-btn>
                <q-btn class="q-ma-sm" label="Cancel" color="grey" @@click="closeBranchDialog"></q-btn>
              </q-card-actions>
            </q-card>
          </q-dialog>

        </q-td>
      </q-tr>

      </template>
    </q-table>

    <!-- Content to be printed -->
 <div v-if="isPrinted">
      <!-- Content to Print -->
      <q-card>
        <q-card-section>
          <p>This is the content that will be printed.</p>
        </q-card-section>
        <!-- Add more Quasar elements as needed -->
      </q-card>
    </div>


</div>

@section code {
  <script>
    var option = {
      //data
      data() {
        return {
          bills: [],
          billColumns: [
               {
            name: 'orderDetails',
            label: 'Order details',
            align: 'center',
            sortable: true,
            field: 'orderDetails'
        },
            {
              name: 'billIndex',
              field: 'billIndex',
              align: 'center',
              sortable: true,
              label: 'No'
            },
            {
              name: 'billId',
              field: 'billId',
              align: 'center',
              sortable: true,
              label: 'Bill ID'
            },
            {
            name: 'customerName',
            label: 'Customer',
            align: 'center',
            sortable: true,
            field: row => `${row.customer.customerFirstname} ${row.customer.customerLastname}`
        },
        
            {
              name: 'orderDate',
              label: 'Ordered date',
              field: 'orderDate',
              align: 'center',
              sortable: true,
            },
            {
              name: 'statusName',
              label: 'Order status',
              field: 'orderStatus.statusName',
              align: 'center',
              sortable: true,
            },
            {
              name: 'methodName',
              label: 'Shipping method',
              field: 'shippingMethod.methodName',
              align: 'center',
              sortable: true,
            },
            {
              name: 'customerTransferPicPath',
              label: 'Customer transfer evidence',
              field: 'customerTransferPicPath',
              align: 'center',
              sortable: true,
            },
            {
              name: 'shippingReceipt',
              label: 'Shipping Receipt',
              field: 'shippingReceipt',
              align: 'center',
              sortable: true,
            },
            {
              name: 'description',
              label: 'Discount name',
              field: 'discount.description',
              align: 'center',
              sortable: true,
            },
            {
              name: 'discountPercentage',
              label: 'Discount percentage',
              field: 'discount.discountPercentage',
              align: 'center',
              sortable: true,
            },
            {
              name: 'deliveryCompanyName',
              label: 'Delivery company name',
              field: 'deliveryService.deliveryCompanyName',
              align: 'center',
              sortable: true,
            },

            {
              name: 'branchName',
              label: 'Deliver branch',
              field: 'branch.branchName',
              align: 'center',
              sortable: true,
            },

          {
            name: 'staffName',
            label: 'Responsible staff',
            align: 'center',
            sortable: true,
            field: row => `${row.staff.staffFirstname} ${row.staff.staffLastname}`
        },
        {
              name: 'actions',
              label: 'Actions',
              field: 'actions',
              align: 'center'
            },
     


        

          ],

          orderDetailColumns:[
           {
              name: 'barcode',
              label: 'Product barcode',
              field: 'product.barcode',
              align: 'center',
              sortable: true
          },
           {
              name: 'productName',
              label: 'Product name',
              field: 'product.productName',
              align: 'center',
              sortable: true
          },
          {
              name: 'shoeSizeNumber',
              label: 'Size',
              field: 'shoeSize.sizeNumber',
              align: 'center',
              sortable: true
          },
          {
              name: 'itemQty',
              label: 'Qty',
              field: 'itemQty',
              align: 'center',
              sortable: true
          },
          {
              name: 'productCondition',
              label: 'Condition',
              field: 'productCondition.conditionName',
              align: 'center',
              sortable: true
          },
          {
              name: 'sellingPrice',
              label: 'Price',
              field: 'product.sellingPrice',
              align: 'center',
              sortable: true
          }
          ]
        };
      }
      ,
      //methods
      methods: {
      
          async editBill(item) {
          try {
            const response = await axios.post("myapi/EditBill", item);
            console.log("Request data:", item);
            console.log("Response data:", response.data);

            if (response.status >= 200 && response.status < 300) {
              console.log("Request successful");
            } else {
              console.error("Unexpected response status:", response.status);
            }
          } catch (error) {
            console.error("Error during request:", error);

            if (error.response?.data?.errors) {
              console.error("Validation errors:", error.response.data.errors);
            }
          }
        }
        ,

        async deleteBill(item) {
          console.log(item);
          var url = "/myapi/DeleteBill";
          var del = item;

          try {
            // Send the delete request
            await axios.post(url, del);

            // Use the correct property name in the filter callback
            this.bills = this.bills.filter(x => x.historyId !== item.historyId);

            // Set a flag in local storage indicating successful delete
            localStorage.setItem('deleteSuccess', 'true');

            // Refresh the page
            window.location.reload();
          } catch (error) {
            console.error('Error deleting delivery branch:', error);

            // Notify the user about the error
            this.$q.notify({
              type: 'negative',
              color: 'red-8',
              message: 'Error deleting delivery branch'
            });
          }
        },
        calculateEndDate(start, duration) {
  const startDate = new Date(start); // Convert start date string to Date object
  const endDate = new Date(startDate); // Create a copy of the start date

  // Add the duration in days to the start date
  endDate.setDate(startDate.getDate() + duration);

  // Format the end date as needed (e.g., to a specific format)
  // Example format: YYYY-MM-DD
  const formattedEndDate = endDate.toISOString().slice(0, 10);

  return formattedEndDate;
},

async onReset() {
  const notif = this.$q.notify({
    type: 'ongoing',
    message: 'Resetting...'
  });

  try {
    // Reset the deliveryRows array to an empty array
    this.bills = [];

    // Call the API to get delivery services data again
    const billResponse = await axios.get("/api/GetBills");
    this.bills = billResponse.data;

    // Notify the user that the reset was successful
    notif({
      type: 'positive',
      message: 'Reset successful',
      timeout: 300
    });
  } catch (error) {
    // Notify the user if an error occurs during the reset process
    notif({
      type: 'negative',
      message: 'Failed to reset. Please try again.',
      timeout: 300
    });
    console.error('Error resetting bills data:', error);
  }
},

 printContent() {
      const printWindow = window.open('', '_blank');
      printWindow.document.write(`
       <html>
  <head>
    <title>Print Content</title>
    <style>
      /* Add CSS styles for printing if needed */
      body {
        font-family: Arial, sans-serif;
        text-align: center;
      }
      .header {
        font-size: 24px;
        margin-top: 20px;
      }
      .subheader {
        font-size: 18px;
        margin-top: 10px;
      }
      .address {
        font-size: 16px;
        margin-top: 20px;
      }
      .customer-info {
        font-size: 16px;
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <!-- Header -->
    <div class="header">
      <p>ໃບຮັບຈອງສິນຄ້າ (Receipt)</p>
      <p>{{ currentDate }}</p> <!-- This will be replaced by the current date dynamically -->
    </div>
    
    <!-- Content -->
    <div class="content">
      <div class="subheader">
        <p>ຮ້ານຄ້າຜູ້ບໍລິການ<br>99<sup>th</sup> Century</p>
      </div>
      <div class="address">
        <p>ລາຍລະອຽດລູກຄ້າ<br>[Customer Name]<br>ວັນທີ່ຈອງສິນຄ້າ [Ordered Date]</p>
      </div>
    </div>
  </body>
</html>
      `);
      printWindow.document.close();
      printWindow.print();
    }

      }
      ,
      //computed
      computed: {

      }
      ,
      //created
      async created() {
    

        try {
          var billResponse = await axios.get("/myapi/GetBills");
          this.bills = billResponse.data;
          console.log(historyResponse.data);
        }
        catch (error) {
          console.log(error);
        }

      }//ecreated
      ,
      //mounted
      mounted() {

      }

    };

    const app = Vue.createApp(option);
    app.use(Quasar)
    app.mount('#app1')
  </script>

}