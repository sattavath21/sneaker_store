@{
    ViewData["Title"] = "ສະຕ໋ອກສິນຄ້າ";
}
<div id="app1">

    <div class="text-h5 text-weight-bold text-white q-pa-lg" style="background-color: #ff3333; color: rgb(230, 229, 229); text-color: white;
            border-top-left-radius: 10px; /* Adjust the radius as needed */
            border-top-right-radius: 10px; /* Adjust the radius as needed */">
        ໜ້າຈັດການສະຕ໋ອກສິນຄ້າ</div>
    <q-table class="product-sticky-column-table" title="Product Information" :rows="products" :columns="columns"
        :visible-columns="visibleColumns">

        <template v-slot:top-left>
            <div class="text-h6 q-pa-md">ລາຍລະອຽດສິນຄ້າ <q-btn icon="restart_alt" round class="q-mx-lg" size="md"
                    color="grey" @@click="onResetSearch"></q-btn></div>
            <q-separator vertical class="q-my-sm"></q-separator>
            <div class="q-pl-sm">
                <q-input debounce="200" dense v-model="searchText" type="text" @@change="filterProducts">
                    <template v-slot:prepend>
                        <q-icon name="search"></q-icon>
                    </template>
                </q-input>
</div>

</template>
<template v-slot:body="props">
    <q-tr :props="props">
        <q-td key="index" :props="props">{{ products.indexOf(props.row) + 1 }}</q-td>
        <q-td key="productImage" :props="props">
            <!-- Image thumbnail with a click event -->
            <q-img :src="props.row.productImagePath" style="cursor: pointer; width: 120px; height: 120px;"
                @@click="toggleImageDialog(props.row)" />

            <!-- Dialog to show the full image -->
            <q-dialog v-model="props.row.showImageDialog" auto-close>
                        <img :src="props.row.productImagePath"
                            style="max-width: 100%; max-height: 85vh; object-fit: fill;" />
            </q-dialog>

        </q-td>

        <q-td key="productName" :props="props">
            {{ props.row.productName.name }}
            <q-popup-edit v-model="props.row.productNameId">
                <q-select v-model="props.row.productNameId" :options="productNameOptions" emit-value map-options dense
                    style="min-width: 200px;" hint="Select a new product"></q-select>
                <div class="justify-end row q-mt-sm">
                    <q-btn color="blue-grey-6" @@click="editProductNameId(props.row)" icon="edit" label="Confirm"
                        v-close-popup="cancelEnabled"></q-btn>
                </div>
            </q-popup-edit>
        </q-td>


        <q-td key="costPrice" class="deposit-money" :props="props">
            {{ formatPrice(props.row.costPrice) }}&#8365;
            <q-popup-edit v-model="props.row.costPrice">
                <q-input v-model="props.row.costPrice" dense autofocus counter></q-input>
                <div class="justify-end row">
                    <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                        v-close-popup="cancelEnabled">
                    </q-btn>
                </div>
            </q-popup-edit>
        </q-td>



        <q-td key="sellingPrice" class="grand-total" :props="props">
           {{ formatPrice(props.row.sellingPrice) }}&#8365;
            <q-popup-edit v-model="props.row.sellingPrice">
                <q-input v-model="props.row.sellingPrice" dense autofocus counter></q-input>
                <div class="justify-end row">
                    <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                        v-close-popup="cancelEnabled">
                    </q-btn>
                </div>
            </q-popup-edit>
        </q-td>

        <q-td key="brandLogo" :props="props">
            <q-img :src="props.row.brand.brandLogoUrl" initial-ratio="4/3" />

        </q-td>
        <q-td key="brandName" :props="props">
            {{ props.row.brand.brandName }}

        </q-td>

        <q-td key="sizeType" :props="props">
            {{ props.row.shoeSize.sizeType}}

        </q-td>

        <q-td key="sizeNumber" :props="props">
            {{ props.row.shoeSize.sizeNumber }}

        </q-td>



        <q-td key="barcode" :props="props">
            {{ props.row.barcode }}
            <q-popup-edit v-model="props.row.barcode">
                <q-input v-model="props.row.barcode" dense autofocus counter></q-input>
                <div class="justify-end row">
                    <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                        v-close-popup="cancelEnabled">
                    </q-btn>
                </div>
            </q-popup-edit>
        </q-td>

        <q-td key="sku" :props="props">{{ props.row.sku}}
            <q-popup-edit v-model="props.row.sku">
                <q-input v-model="props.row.sku" dense autofocus counter></q-input>
                <div class="justify-end row">
                    <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                        v-close-popup="cancelEnabled">
                    </q-btn>
                </div>
            </q-popup-edit>
        </q-td>


        <q-td key="productImagePath" :props="props">
            {{ props.row.productImagePath }}
            <q-popup-edit v-model="props.row.productImagePath">
                <q-input v-model="props.row.productImagePath" dense autofocus counter></q-input>
                <div class="justify-end row">
                    <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                        v-close-popup="cancelEnabled">
                    </q-btn>
                </div>
            </q-popup-edit>
        </q-td>
        
             <q-td key="conditionDescription" :props="props">
            {{ props.row.conditionDescription }}
            <q-popup-edit v-model="props.row.conditionDescription">
                <q-input v-model="props.row.conditionDescription" dense autofocus counter></q-input>
                <div class="justify-end row">
                    <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                        v-close-popup="cancelEnabled">
                    </q-btn>
                </div>
            </q-popup-edit>
        </q-td>

             <q-td key="boxDescription" :props="props">
            {{ props.row.boxDescription }}
            <q-popup-edit v-model="props.row.boxDescription">
                <q-input v-model="props.row.boxDescription" dense autofocus counter></q-input>
                <div class="justify-end row">
                    <q-btn color="blue-grey-6" @@click="editProduct(props.row)" icon="edit" label="edit"
                        v-close-popup="cancelEnabled">
                    </q-btn>
                </div>
            </q-popup-edit>
        </q-td>


        <q-td key="deletes" :props="props">
            <q-btn class="q-ma-sm q-px-lg q-py-sm" color="red-6" @@click="openDeleteProductDialog(props.row.productId)"
                icon="delete_forever" size="15px"></q-btn>
            <q-dialog v-model="confirm" persistent>
                <q-card>
                    <q-card-section class="row items-center">
                        <q-avatar icon="inventory_2" color="grey-9" text-color="white" class="q-mr-sm"></q-avatar>
                        <span class="q-ml-sm">Are you sure you want to delete this product?</span>
                    </q-card-section>

                    <q-card-actions align="center">
                        <q-btn class="q-ma-sm" color="red-6" @@click="deleteProduct" label="Yes" v-close-popup></q-btn>
                        <q-btn class="q-ma-sm" label="No" color="grey" @@click="closeDeleteProductDialog"></q-btn>
                    </q-card-actions>
                </q-card>
            </q-dialog>

        </q-td>



    </q-tr>
</template>
</q-table>

<div class="bg-grey-9 q-pa-sm" style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"></div>


<q-btn class="q-my-md q-py-md float-right" style="margin-bottom: 50px;" color="green" icon="add_box" label="Add Product"
    size="md" onclick='window.location="/Inventory/AddPro"'></q-btn>


</div>

@section code {
    <script>
        var option = {
            //data
            data() {

                return {
                    isAdmin: false, // Set to true if the user is an admin
                    showImageDialog: false, // Add showImageDialog variable
                    products: [],
                    originalProducts: [],
                    confirm: false,
                    confirm2: false,
                    searchText: "",
                    columns: [
                        {
                            name: 'index',
                            field: 'index',
                            align: 'left',
                            sortable: true,
                            label: 'No'
                        },
                        {
                            name: 'productImage',
                            label: 'ຮູບສິນຄ້າ',
                            field: 'productImagePath',
                            sortable: true,
                            align: 'center',

                        },
                        {
                            name: 'productName',
                            label: 'ຊື່ສິນຄ້າ',
                            field: 'productName.name',
                            sortable: true,
                            align: 'left',

                        },
                        {
                            name: 'costPrice',
                            label: 'ລາຄາຊື້',
                            field: 'costPrice',
                            sortable: true,
                            align: 'right',

                        },
                        {
                            name: 'sellingPrice',
                            label: 'ລາຄາຂາຍ',
                            field: 'sellingPrice',
                            sortable: true,
                            align: 'right',

                        },


                        {
                            name: 'brandLogo',
                            label: 'ແບຣນໂລໂກ້',    
                            field: 'brand.brandLogoUrl',
                            sortable: false,
                            align: 'center',

                        },
                        {
                            name: 'brandName',
                            label: 'ຊື່ແບຣນ',
                            field: 'brand.brandName',
                            sortable: true,
                            align: 'left',

                        },
                        {
                            name: 'sizeType',
                            label: 'ປະເພດໄຊ້',
                            field: 'shoeSize.sizeType',
                            sortable: true,
                            align: 'left',

                        },
                        {
                            name: 'sizeNumber',
                            label: 'ໄຊ້ເກີບ',
                            field: 'shoeSize.sizeNumber',
                            sortable: true,
                            align: 'left',

                        },
                        {
                            name: 'barcode',
                            label: 'ບາໂຄ້ດ',
                            field: 'barcode',
                            sortable: true,
                            align: 'left',

                        },
                        {
                            name: 'sku',
                            label: 'SKU',
                            field: 'sku',
                            sortable: true,
                            align: 'left',

                        },
                        {
                            name: 'productImagePath',
                            label: 'ທີ່ຢູ່ຮູບ',
                            field: 'productImagePath',
                            sortable: true,
                            align: 'left',

                        },
                        {
                            name: 'conditionDescription', // Name of the column
                            label: 'ສະພາບເກີບ', // Label for the column
                            field: 'conditionDescription', // Field to bind data to
                            align: 'center',
                            sortable: true,
                        },
                        {
                            name: 'boxDescription', // Name of the column
                            label: 'ສະພາບກ່ອງ', // Label for the column
                            field: 'boxDescription', // Field to bind data to
                            align: 'center',
                            sortable: true,
                        },
                        {
                            name: 'deletes',
                            label: 'ລົບສິນຄ້າ',
                            field: 'deletes',
                            align: 'center'
                        },
                    ],
                    visibleColumns: [
                        'index',
                        'productImage',
                        'productName',
                        'costPrice',
                        'sellingPrice',
                        'brandLogo',
                        'brandName',
                        'sizeType',
                        'sizeNumber',
                        'barcode',
                        'sku',
                        'productImagePath',
                        'conditionDescription',
                        'boxDescription',
                        'deletes'

                        // Add other column keys here
                    ],
                    productIdToDelete: null,
                    productNameOptions: [],
                    newProductNameId: null,

                };
            }
            ,
            //methods
            methods: {
                formatPrice(price) {
                    // Convert the price to a string
                    let formattedPrice = price.toString();

                    // Use regex to add commas for every three digits
                    formattedPrice = formattedPrice.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

                    return formattedPrice;
                },
                openDeleteProductDialog(productId) {
                    this.confirm = true;
                    this.productIdToDelete = productId; // Store the deliveryServiceId for later use
                },
                closeDeleteProductDialog() {
                    this.confirm = false;
                    this.productIdToDelete = null;
                },


                toggleImageDialog(product) {
                    product.showImageDialog = !product.showImageDialog;
                }, //ef

                async editProduct(item) {
                    try {
                        const response = await axios.post("api/EditProduct", item);

                        console.log("Request data:", item);
                        console.log("Response data:", response.data);

                        if (response.status >= 200 && response.status < 300) {
                            console.log("Request successful");
                            this.$q.notify({
                                color: 'green-4',
                                textColor: 'white',
                                icon: 'cloud_done',
                                message: 'Product Modified!'
                            });
                        } else {
                            console.error("Unexpected response status:", response.status);
                            this.$q.notify({
                                color: 'red-4',
                                textColor: 'white',
                                icon: 'error',
                                message: 'Unexpected response status.'
                            });
                        }
                    } catch (error) {
                        console.error("Error during request:", error);
                        this.$q.notify({
                            color: 'red-4',
                            textColor: 'white',
                            icon: 'error',
                            message: 'Error during request'
                        });

                        if (error.response?.data?.errors) {
                            console.error("Validation errors:", error.response.data.errors);
                        }
                    }
                }
                , //ef

                async deleteProduct() {
                    try {
                        const response = await axios.post(
                            `/api/DeleteProduct?productIdToDelete=${this.productIdToDelete}`
                        );


                        // Reset the state after successful deletion
                        this.productIdToDelete = 0;

                        // Optional: Notify the user about the success
                        this.$q.notify({
                            type: 'positive',
                            message: response.data.message || 'Product deleted successfully!',
                        });

                        // Reload the page or update the UI dynamically
                        window.location.reload();
                    } catch (error) {
                        // Notify the user about the error
                        this.$q.notify({
                            type: 'negative',
                            message: error.response?.data || 'Error deleting the product. Please try again.',
                        });

                        console.error("Error deleting product:", error);
                    }
                }
                ,
                filterProducts() {
                    let products = [...this.originalProducts];

                    if (this.searchText.trim() !== "") {
                        const searchTerms = this.searchText.toLowerCase().split(" ");

                        products = products.filter(product => {
                            const barcode = product.barcode?.toLowerCase() || "";
                            const productNames = product.productName?.name.toLowerCase() || "";
                            const brandName = product.brand?.brandName.toLowerCase() || "";
                            const shoeSize = product.shoeSize?.sizeNumber.toString().toLowerCase() || "";
                            const sizeType = product.shoeSize?.sizeType.toLowerCase() || "";
                            const condition = product.conditionDescription?.toLowerCase() || "";
                            const boxCondition = product.boxDescription?.toLowerCase() || "";

                            // Exact match using regex
                            return searchTerms.every(term =>
                                new RegExp(`\\b${term}\\b`, "i").test(barcode) ||
                                new RegExp(`\\b${term}\\b`, "i").test(productNames) ||
                                new RegExp(`\\b${term}\\b`, "i").test(brandName) ||
                                new RegExp(`\\b${term}\\b`, "i").test(shoeSize) ||
                                new RegExp(`\\b${term}\\b`, "i").test(sizeType) ||
                                new RegExp(`\\b${term}\\b`, "i").test(condition) ||
                                new RegExp(`\\b${term}\\b`, "i").test(boxCondition)
                            );
                        });
                    }

                    console.log("Filtered products:", products);

                    // Notify and update
                    const notif = this.$q.notify({
                        type: 'ongoing',
                        message: 'Filtering products...'
                    });

                    setTimeout(() => {
                        notif({
                            type: 'positive',
                            message: 'Filter applied',
                            timeout: 300
                        });
                    }, 600);

                    this.products = products; // Update filtered products
                },


                    onResetSearch() {
                    const notif = this.$q.notify({
                        type: 'ongoing',
                        message: 'Loading...'
                    })

                    // simulate delay
                    setTimeout(() => {
                        notif({
                            type: 'positive',
                            message: 'Reseted',
                            timeout: 300
                        })
                    }, 600)
                    this.products = [...this.originalProducts]
                    this.searchText = ""
                },



                async onReset() {
                    const notif = this.$q.notify({
                        type: 'ongoing',
                        message: 'Resetting...'
                    });

                    try {


                        // Notify the user that the reset was successful
                        notif({
                            type: 'positive',
                            message: 'Reset successful',
                            timeout: 300
                        });
                    } catch (error) {
                        // Notify the user if an error occurs during the reset process
                        notif({
                            type: 'negative',
                            message: 'Failed to reset. Please try again.',
                            timeout: 300
                        });
                        console.error('Error resetting deliveries data:', error);
                    }


                }
                ,

                async fetchProductNames() {
                    try {
                        const response = await axios.get('/api/GetProductName');
                        this.productNameOptions = response.data.map(productName => ({
                            value: productName.productNameId,
                            label: `${productName.name}`
                        }));
                        console.log("Product Name search able:", this.productNameOptions);
                    } catch (error) {
                        console.error('Error fetching product names:', error);
                    }
                },

                async editProductNameId(item) {
                    try {
                        // Make an API call to update the product's ProductNameId
                        const response = await axios.post("api/EditProductNameId", item);

                        console.log("Request data:", item);
                        console.log("Response data:", response.data);

                        if (response.status >= 200 && response.status < 300) {
                            console.log("Request successful");
                            this.$q.notify({
                                color: 'green-4',
                                textColor: 'white',
                                icon: 'cloud_done',
                                message: 'Product Name Updated!'
                            });

                            // Add a 1-second delay before reloading
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            window.location.reload();

                        } else {
                            console.error("Unexpected response status:", response.status);
                            this.$q.notify({
                                color: 'red-4',
                                textColor: 'white',
                                icon: 'error',
                                message: 'Unexpected response status.'
                            });
                        }
                    } catch (error) {
                        console.error("Error during request:", error);
                        this.$q.notify({
                            color: 'red-4',
                            textColor: 'white',
                            icon: 'error',
                            message: 'Error during request'
                        });

                        if (error.response?.data?.errors) {
                            console.error("Validation errors:", error.response.data.errors);
                        }
                    }
                },


            }
            , //ef





            //computed
            computed: {
            }
            ,

            //created
            async created() {

                try {
                    var response = await axios.get("/api/GetProducts");
                    this.originalProducts = response.data;
                    this.products = response.data.map(product => ({ ...product, showImageDialog: false }));
                    console.log(this.products);
                } catch (error) {
                    console.log(error);
                }



                try {
                    const response = await axios.get("/bossapi/GetUserData");
                    const userData = response.data;

                    // Check user role
                    if (!userData.isAdmin) {
                        const index = this.visibleColumns.indexOf('costPrice');
                        if (index !== -1) {
                            this.visibleColumns.splice(index, 1);
                        }
                    }


                } catch (error) {
                    console.error(error);
                }



            }//ecreated
            ,
            //mounted
            mounted() {
                this.fetchProductNames();

            }

        };

        const app = Vue.createApp(option);
        app.use(Quasar)
        app.mount('#app1')
    </script>
}